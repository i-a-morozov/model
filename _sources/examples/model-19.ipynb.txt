{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "38605ee8-bbb3-40ef-a12f-640c551a26ce",
   "metadata": {},
   "source": [
    "# Example-20: LOGO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4de5e2b9-de1a-4592-bab8-efecc8e06221",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this example model logo is created following several steps\n",
    "\n",
    "# - define fodo based lattice\n",
    "# - adjust fractional tunes (move horizontal tune close to 2/3)\n",
    "# - correct chromaticity\n",
    "# - compute phase space trajectories at a single location\n",
    "# - choose one lovely trajectory in qx-px and generate initial set\n",
    "# - slice lattice\n",
    "# - compute orbits for all initials\n",
    "# - transform data to layout frame\n",
    "# - generate 3d layout\n",
    "# - select a view and save logo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f106f20-b0ac-4f8d-aef0-f9483355cc0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import\n",
    "\n",
    "import matplotlib\n",
    "from matplotlib import pyplot as plt\n",
    "from matplotlib.patches import Rectangle\n",
    "matplotlib.rcParams['text.usetex'] = True\n",
    "\n",
    "from plotly import graph_objects\n",
    "\n",
    "import torch\n",
    "\n",
    "from twiss import twiss\n",
    "from twiss import propagate\n",
    "from twiss import advance\n",
    "from twiss import wolski_to_cs\n",
    "\n",
    "from ndmap.pfp import parametric_fixed_point\n",
    "from ndmap.evaluate import evaluate\n",
    "\n",
    "from model.library.drift import Drift\n",
    "from model.library.quadrupole import Quadrupole\n",
    "from model.library.sextupole import Sextupole\n",
    "from model.library.dipole import Dipole\n",
    "from model.library.bpm import BPM\n",
    "from model.library.line import Line\n",
    "\n",
    "from model.command.layout import Layout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "db87d181-03d9-4030-9625-14d80f0cce51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define simple FODO based lattice\n",
    "\n",
    "QF = Quadrupole('QF', 0.5, +0.20)\n",
    "QD = Quadrupole('QD', 0.5, -0.19)\n",
    "SF = Sextupole('SF', 0.25)\n",
    "SD = Sextupole('SD', 0.25)\n",
    "DR = Drift('DR', 0.25)\n",
    "BM = Dipole('BM', 3.50, torch.pi/4.0)\n",
    "BA = BPM('BA', direction='inverse')\n",
    "BB = BPM('BB', direction='forward')\n",
    "\n",
    "FODO = Line('FODO', \n",
    "            [BA, QF, DR, SF, DR, BM, DR, SD, DR, QD, QD, DR, SD, DR, BM, DR, SF, DR, QF, BB], \n",
    "            propagate=True, \n",
    "            dp=0.0, \n",
    "            exact=False, \n",
    "            output=False, \n",
    "            matrix=False)\n",
    "\n",
    "\n",
    "RING = Line('RING', \n",
    "            4*[FODO], \n",
    "            propagate=True, \n",
    "            dp=0.0, \n",
    "            exact=False, \n",
    "            output=False, \n",
    "            matrix=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "afbd94b8-3d0c-40c6-88a4-948452e7e5f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'BA': 1, 'QF': 10, 'DR': 5, 'SF': 5, 'BM': 70, 'SD': 5, 'QD': 10, 'BB': 1}\n"
     ]
    }
   ],
   "source": [
    "# Slice lattice\n",
    "\n",
    "RING.ns = 0.05\n",
    "print(RING.ns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "13f70914-801b-46d3-a4bd-71079fbe4dd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ -0.3382, -17.5116,   0.0000,   0.0000],\n",
      "        [  0.0506,  -0.3382,   0.0000,   0.0000],\n",
      "        [  0.0000,   0.0000,  -0.2976,  -6.0422],\n",
      "        [  0.0000,   0.0000,   0.1508,  -0.2976]], dtype=torch.float64)\n",
      "\n",
      "tensor(0.6951, dtype=torch.float64)\n",
      "tensor(0.7019, dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Compute tunes\n",
    "\n",
    "state = torch.tensor([0.0, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "\n",
    "matrix = torch.func.jacrev(RING)(state)\n",
    "\n",
    "print(matrix)\n",
    "print()\n",
    "\n",
    "(nux, nuy), *_ = twiss(matrix)\n",
    "\n",
    "print(nux)\n",
    "print(nuy)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e94f87f2-35f1-4074-979a-47a99a70b0b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([-0.0236, -0.0015], dtype=torch.float64)\n",
      "tensor([-0.0014, -0.0001], dtype=torch.float64)\n",
      "tensor([8.9454e-05, 1.0546e-05], dtype=torch.float64)\n",
      "tensor([-3.6114e-07, -4.0399e-08], dtype=torch.float64)\n",
      "tensor([-9.9395e-11, -1.1213e-11], dtype=torch.float64)\n",
      "tensor([ 4.4409e-16, -4.4409e-16], dtype=torch.float64)\n",
      "tensor([0.0000e+00, 3.3307e-16], dtype=torch.float64)\n",
      "tensor([0.0000e+00, 6.6613e-16], dtype=torch.float64)\n",
      "CPU times: user 1min 33s, sys: 458 ms, total: 1min 34s\n",
      "Wall time: 1min 34s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# Adjust fractional tunes\n",
    "\n",
    "# Define tune function\n",
    "\n",
    "def tune(dkn):\n",
    "    dknf, dknd = dkn\n",
    "    data = RING.data()\n",
    "    data['FODO']['QF']['kn'] = dknf\n",
    "    data['FODO']['QD']['kn'] = dknd\n",
    "    matrix = torch.func.jacrev(lambda state, data: RING(state, data=data))(state, data)\n",
    "    tunes, *_ = twiss(matrix)\n",
    "    return tunes\n",
    "\n",
    "# Define target tune values\n",
    "\n",
    "nux_target = torch.tensor(0.667, dtype=torch.float64)\n",
    "nuy_target = torch.tensor(0.700, dtype=torch.float64)\n",
    "\n",
    "# Perform correction\n",
    "\n",
    "dkn = torch.tensor([0.0, 0.0], dtype=torch.float64)\n",
    "\n",
    "for _ in range(8):\n",
    "\n",
    "    dnux = nux - nux_target\n",
    "    dnuy = nuy - nuy_target\n",
    "    \n",
    "    (dknf, dknd) = dkn = - torch.linalg.pinv(torch.func.jacrev(tune)(dkn)) @ torch.stack([dnux, dnuy])\n",
    "\n",
    "    nux, nuy = tune(dkn)\n",
    "    \n",
    "    QF.kn = (QF.kn + dknf).item()\n",
    "    QD.kn = (QD.kn + dknd).item()\n",
    "\n",
    "    print(tune(dkn) - torch.stack([nux_target, nuy_target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d10e7d2c-7c7e-41b5-b4d1-5a84aa494df8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([-5.3291e-15, -2.6645e-14], dtype=torch.float64)\n",
      "CPU times: user 1min 31s, sys: 695 ms, total: 1min 32s\n",
      "Wall time: 1min 32s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# Chromaticity\n",
    "\n",
    "def scan(data, name, target):\n",
    "    for key, value in data.items():\n",
    "        if isinstance(value, dict):\n",
    "            scan(value, name, target)\n",
    "        elif key == name:\n",
    "            data[key] = target\n",
    "\n",
    "def ring(state, dp, dms):\n",
    "    dp, *_ = dp\n",
    "    dmsf, dmsd, *_ = dms\n",
    "    data = RING.data()\n",
    "    scan(data, 'dp', dp)\n",
    "    data['FODO']['SF']['ms'] = dmsf\n",
    "    data['FODO']['SD']['ms'] = dmsd\n",
    "    return RING(state, data=data)\n",
    "\n",
    "\n",
    "fp = torch.tensor([0.0, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "dp = torch.tensor([0.0], dtype=torch.float64)\n",
    "dms = torch.tensor([0.0, 0.0], dtype=torch.float64)\n",
    "\n",
    "pfp, *_ = parametric_fixed_point((1, ), fp, [dp], ring, dms)\n",
    "\n",
    "# Define transformation around fixed point\n",
    "\n",
    "def pfp_ring(state, dp, dms):\n",
    "    return ring(state + evaluate(pfp, [dp]), dp, dms) - evaluate(pfp, [dp])\n",
    "\n",
    "# Tune\n",
    "\n",
    "def tune(dp, dms):\n",
    "    matrix = torch.func.jacrev(pfp_ring)(state, dp, dms)\n",
    "    tunes, *_ = twiss(matrix)\n",
    "    return tunes\n",
    "\n",
    "# Chromaticity\n",
    "\n",
    "def chromaticity(dms):\n",
    "    return torch.func.jacrev(tune)(dp, dms)\n",
    "\n",
    "# Initial chomaticity values\n",
    "\n",
    "psix, psiy = chromaticity(dms).squeeze()\n",
    "\n",
    "# Define target tune values\n",
    "\n",
    "psix_target = torch.tensor(5.0, dtype=torch.float64)\n",
    "psiy_target = torch.tensor(5.0, dtype=torch.float64)\n",
    "\n",
    "# Perform correction\n",
    "\n",
    "dpsix = psix - psix_target\n",
    "dpsiy = psiy - psiy_target\n",
    "\n",
    "(dmsf, dmsd) = dms = - torch.linalg.pinv((torch.func.jacrev(chromaticity)(dms)).squeeze()) @ torch.stack([dpsix, dpsiy])\n",
    "\n",
    "SF.ms = (SF.ms + dmsf).item()\n",
    "SD.ms = (SD.ms + dmsd).item()\n",
    "\n",
    "dms *= 0.0\n",
    "\n",
    "print(chromaticity(dms).squeeze() - torch.stack([psix_target, psiy_target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bd40fc59-0e55-468c-9f6a-2ccf25c39462",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 19min 50s, sys: 197 ms, total: 19min 50s\n",
      "Wall time: 19min 50s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# Generate and plot phase space trajectories\n",
    "\n",
    "qx = torch.linspace(0.10, 0.30, 8, dtype=torch.float64)\n",
    "px = torch.zeros_like(qx)\n",
    "qy = torch.zeros_like(qx)\n",
    "py = torch.zeros_like(qx)\n",
    "\n",
    "state = torch.stack([qx, px, qy, py]).T\n",
    "orbit = []\n",
    "\n",
    "for _ in range(2**10):\n",
    "    state = torch.vmap(RING)(state)\n",
    "    orbit.append(state)\n",
    "\n",
    "qx, px, *_ = torch.stack(orbit).swapaxes(0, -1)\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.scatter(qx.cpu().numpy(), px.cpu().numpy(), s=1, color='black')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cfea2b34-983d-4060-8ac9-0d22f432a54f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 12min 17s, sys: 20.1 ms, total: 12min 17s\n",
      "Wall time: 12min 17s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "torch.Size([1024, 968, 4])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time \n",
    "\n",
    "# Generate selected trajectory on slices\n",
    "\n",
    "FODO.output = True\n",
    "RING.output = True\n",
    "\n",
    "state = torch.tensor([0.27, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "\n",
    "orbit = []\n",
    "for _ in range(2**10):\n",
    "    state = RING(state)\n",
    "    orbit.append(RING.container_output.clone())\n",
    "orbit = torch.stack(orbit)\n",
    "orbit.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4964cccc-5aec-48f9-9c62-0c7fb5f3c1f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3D\n",
    "\n",
    "layout = Layout(RING)\n",
    "names, kinds, lengths, angles, points = layout.slicing_table()\n",
    "angles = angles.cumsum(-1)\n",
    "\n",
    "# Transform orbits\n",
    "\n",
    "qx, px, *_ = orbit.swapaxes(0, 1).swapaxes(0, -1)\n",
    "q_x = torch.zeros_like(qx)\n",
    "q_y = 3.0*qx\n",
    "q_z = 30.0*px\n",
    "q_points = torch.stack([q_x, q_y, q_z]).swapaxes(0, -1)\n",
    "q_x, q_y, q_z = torch.vmap(layout.transform)(q_points, points, angles).swapaxes(0, -1)\n",
    "\n",
    "# Select data at BPMs\n",
    "\n",
    "q_x_bpm = []\n",
    "q_y_bpm = []\n",
    "q_z_bpm = []\n",
    "for kind, qx, qy, qz in zip(kinds, q_x.T, q_y.T, q_z.T):\n",
    "    if kind == 'BPM':\n",
    "        q_x_bpm.append(qx)\n",
    "        q_y_bpm.append(qy)\n",
    "        q_z_bpm.append(qz)\n",
    "q_x_bpm = torch.stack(q_x_bpm)\n",
    "q_y_bpm = torch.stack(q_y_bpm)\n",
    "q_z_bpm = torch.stack(q_z_bpm)\n",
    "\n",
    "# Generate reference orbit\n",
    "\n",
    "x, y, z = layout.orbit(flat=False, step=0.01, start=(0, 0))\n",
    "\n",
    "# Generate layout (can be saved as html with write_html method)\n",
    "\n",
    "blocks = layout.profile_3d(scale=1.75)\n",
    "\n",
    "# Plot\n",
    "\n",
    "figure = graph_objects.Figure(\n",
    "    data=[\n",
    "        graph_objects.Scatter3d(\n",
    "            x=x.numpy(),\n",
    "            y=y.numpy(),\n",
    "            z=z.numpy(), \n",
    "            mode='lines',\n",
    "            name='Orbit',\n",
    "            line=dict(color='black',width=2.0,dash='solid'),\n",
    "            opacity=0.75,\n",
    "            showlegend=True\n",
    "        ),\n",
    "        graph_objects.Scatter3d(\n",
    "            x=q_x.flatten().numpy(),\n",
    "            y=q_y.flatten().numpy(),\n",
    "            z=q_z.flatten().numpy(), \n",
    "            mode='lines',\n",
    "            name='Trajectory',\n",
    "            line=dict(color='black',width=1.0,dash='solid'),\n",
    "            opacity=0.10,\n",
    "            showlegend=True            \n",
    "\n",
    "        ), \n",
    "        graph_objects.Scatter3d(\n",
    "            x=q_x_bpm.flatten().numpy(),\n",
    "            y=q_y_bpm.flatten().numpy(),\n",
    "            z=q_z_bpm.flatten().numpy(), \n",
    "            mode='markers',\n",
    "            name='Projection',\n",
    "            marker=dict(color='red',size=1.5),\n",
    "            opacity=0.10,\n",
    "            showlegend=True\n",
    "        ),         \n",
    "        *[graph_objects.Mesh3d(block) for block in blocks]\n",
    "    ]\n",
    ")\n",
    "figure.update_layout(\n",
    "    scene=dict(\n",
    "        xaxis=dict(visible=False, range=[-20,20]),\n",
    "        yaxis=dict(visible=False, range=[-20,20]),\n",
    "        zaxis=dict(visible=False, range=[-5,5]),\n",
    "        aspectratio=dict(x=1, y=1, z=1/4),\n",
    "        annotations=[]\n",
    "    ),\n",
    "    margin=dict(l=0, r=0, t=0, b=0),\n",
    "    legend=dict(orientation='v', x=0., y=1., xanchor='left', yanchor='top'),\n",
    "    hoverlabel=dict(font_size=12, font_family=\"Rockwell\", font_color='white'),\n",
    "    legend_groupclick='toggleitem',\n",
    "    plot_bgcolor='rgba(0, 0, 0, 0)',\n",
    "    paper_bgcolor='rgba(0, 0, 0, 0)'\n",
    ")\n",
    "figure.write_html('logo.html')"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
