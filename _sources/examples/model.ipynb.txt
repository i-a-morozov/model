{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "556562f3-8ece-4517-8c93-ee5e2fc29131",
   "metadata": {},
   "source": [
    "# Example-01: Optimizaion (import/export API)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "baa39129-4d73-44c2-bf1e-88996ea48c84",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading API facilitates (suboptimal) interface with different optimization libraries\n",
    "# In this example, quadrupole gradients are used to fit beta functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7aa2bbf6-cfe5-49c1-b9a7-de7cce585bbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "from model.external import load_sdds\n",
    "from model.external import load_lattice\n",
    "from model.external import text_lattice\n",
    "\n",
    "import numpy\n",
    "from numpy import ndarray as Array\n",
    "\n",
    "from scipy.optimize import minimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "540bbb11-ef4b-4f97-9d9a-179af31e0de8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set quadrupole gradient and compute and return twiss parameters\n",
    "\n",
    "def evaluate(knobs:Array) -> Array:\n",
    "    kf, kd = knobs\n",
    "    path:Path = Path('optimize.lte')\n",
    "    lattice:dict[str, dict[str, str | int | float | dict]] = load_lattice(path)\n",
    "    lattice['QF']['K1'] = float(kf)\n",
    "    lattice['QD']['K1'] = float(kd)\n",
    "    with path.open('w') as stream:\n",
    "        stream.write(text_lattice('LTE', lattice))\n",
    "    !elegant 'optimize.ele' > /dev/null\n",
    "    !sddsconvert -ascii 'binary.twiss' 'optimize.twiss'\n",
    "    path:Path = Path('optimize.twiss')\n",
    "    _, columns = load_sdds(path)\n",
    "    return numpy.asarray([[data['betax'], data['betay']] for location, data in columns.items()]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f7c9dc5a-7d3e-4b74-a219-82cf714abf3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set target beta functions\n",
    "\n",
    "target:Array = numpy.asarray([+0.21, -0.19])\n",
    "result:Array = evaluate(target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ffdb81b2-1cde-4b44-8133-f442d9c3065c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set objetive function to minimize\n",
    "\n",
    "def objective(knobs:Array) -> Array:\n",
    "    return numpy.sum((evaluate(knobs) - result)**2)\n",
    "\n",
    "objective(target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3dda343b-b675-45c5-9ba3-e2b4f408c0b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "       message: Optimization terminated successfully.\n",
       "       success: True\n",
       "        status: 0\n",
       "           fun: 1.3489521479279302e-28\n",
       "             x: [ 2.100e-01 -1.900e-01]\n",
       "           nit: 20\n",
       "          nfev: 40\n",
       " final_simplex: (array([[ 2.100e-01, -1.900e-01],\n",
       "                       [ 2.100e-01, -1.900e-01],\n",
       "                       [ 2.100e-01, -1.900e-01]]), array([ 1.349e-28,  2.891e-05,  6.010e-05]))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optimize \n",
    "\n",
    "knobs:Array = numpy.asarray([+0.20, -0.20])\n",
    "\n",
    "minimize(objective, knobs, method='Nelder-Mead')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a641003a-ec1b-4ea1-8a46-fcde2f2d52aa",
   "metadata": {},
   "source": [
    "# Example-02: Workflow (MADX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0496604d-6bd4-4d4c-a840-ece3c4172509",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "from model.external import load_lattice\n",
    "from model.external import rift_lattice\n",
    "from model.external import text_lattice\n",
    "from model.external import load_tfs\n",
    "from model.external import convert\n",
    "from model.external import add_rc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7133deed-c534-49c0-8d0f-af1f4c8eae5a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DR: DRIFT, L=2.0;\n",
      "BM: SBEND, L=1.0, ANGLE=0.17453292519943295;\n",
      "QF: QUADRUPOLE, L=1.0, K1=+0.2;\n",
      "QD: QUADRUPOLE, L=0.5, K1=-0.2;\n",
      "\n",
      "M: MONITOR,;\n",
      "\n",
      "HEAD: MARKER,; ! TEST: DRIFT,\n",
      "TAIL: MARKER,; ! TEST: DRIFT,\n",
      "\n",
      "FODO: LINE=(HEAD, M, QD, DR, BM, DR, QF, DR, BM, DR, QD, TAIL) ;\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Given some initial MADX lattice file (FODO)\n",
    "\n",
    "file = Path('initial.madx')\n",
    "\n",
    "with file.open('r') as stream:\n",
    "    print(stream.read())\n",
    "\n",
    "# Several regular elements are defined\n",
    "# HEAD and TAIL should appear as the first and the last elements\n",
    "# All elements should be defined on a single line with numerical parameters\n",
    "# Lattice should be defined using lines\n",
    "# Comma after element type is mandatory\n",
    "# Comments appearing after definitions should also represent an element definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "532260b3-b100-4f18-807b-751bca5d3671",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DR {'KIND': 'DRIFT', 'RC': '', 'L': 2.0}\n",
      "BM {'KIND': 'SBEND', 'RC': '', 'L': 1.0, 'ANGLE': 0.17453292519943295}\n",
      "QF {'KIND': 'QUADRUPOLE', 'RC': '', 'L': 1.0, 'K1': 0.2}\n",
      "QD {'KIND': 'QUADRUPOLE', 'RC': '', 'L': 0.5, 'K1': -0.2}\n",
      "M {'KIND': 'MONITOR', 'RC': ''}\n",
      "HEAD {'KIND': 'MARKER', 'RC': 'TEST: DRIFT,'}\n",
      "TAIL {'KIND': 'MARKER', 'RC': 'TEST: DRIFT,'}\n",
      "FODO {'KIND': 'LINE', 'SEQUENCE': ['HEAD', 'M', 'QD', 'DR', 'BM', 'DR', 'QF', 'DR', 'BM', 'DR', 'QD', 'TAIL']}\n"
     ]
    }
   ],
   "source": [
    "# If element and beamline definitions comply with the above requirements\n",
    "# The lattice file can be loaded as a python dictionary\n",
    "\n",
    "lattice = load_lattice(file)\n",
    "\n",
    "for key, value in lattice.items():\n",
    "    print(key, value)\n",
    "\n",
    "# For each element and beamline, a key-value pair in created\n",
    "# Value is itself a dictionary containing all information about the original elements\n",
    "# Each element parameter is casted from string to int, float or string\n",
    "# Comment after element definition is saved into RC (it has a special use case, see below)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd93d303-6a15-4462-ad1a-520c7b706e58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_DR {'KIND': 'MONITOR', 'RC': ['DR', {'KIND': 'DRIFT', 'L': 2.0}]}\n",
      "H_DR {'KIND': 'DRIFT', 'L': 1.0}\n",
      "DR {'KIND': 'LINE', 'SEQUENCE': ['H_DR', 'M_DR', 'H_DR']}\n",
      "V_BM {'KIND': 'MARKER', 'RC': ['BM', {'KIND': 'SBEND', 'L': 1.0, 'ANGLE': 0.17453292519943295}]}\n",
      "H_BM {'KIND': 'SBEND', 'L': 0.5, 'ANGLE': 0.08726646259971647}\n",
      "BM {'KIND': 'LINE', 'SEQUENCE': ['H_BM', 'V_BM', 'H_BM']}\n",
      "V_QF {'KIND': 'MARKER', 'RC': ['QF', {'KIND': 'QUADRUPOLE', 'L': 1.0, 'K1': 0.2}]}\n",
      "H_QF {'KIND': 'QUADRUPOLE', 'L': 0.5, 'K1': 0.2}\n",
      "QF {'KIND': 'LINE', 'SEQUENCE': ['H_QF', 'V_QF', 'H_QF']}\n",
      "QD {'KIND': 'QUADRUPOLE', 'RC': '', 'L': 0.5, 'K1': -0.2}\n",
      "M {'KIND': 'MONITOR', 'RC': ''}\n",
      "HEAD {'KIND': 'MARKER', 'RC': 'TEST: DRIFT,'}\n",
      "TAIL {'KIND': 'MARKER', 'RC': 'TEST: DRIFT,'}\n",
      "FODO {'KIND': 'LINE', 'SEQUENCE': ['HEAD', 'M', 'QD', 'DR', 'BM', 'DR', 'QF', 'DR', 'BM', 'DR', 'QD', 'TAIL']}\n"
     ]
    }
   ],
   "source": [
    "# Error lattice is defined by a set of linear transformations between selected locations\n",
    "# Each locations can be a MONITOR (beam observation) or a VIRTUAL (error)\n",
    "# Two special locatons (HEAD and TAIL) should present in the lattice\n",
    "# Using the above dictionary representation, new observation locations can be inserted\n",
    "# Locations are inserted at the middle of selected elements (selected by type or name)\n",
    "# Selected elements are splitted in half and renamed, old names are binded to beamlines\n",
    "# Original element definitions are added to created location RC\n",
    "# Typicaly, monitor locations correspond to MONITOR elements, but new monitor elements can be also inserted\n",
    "# Virtual locations can be inserted into quadrupole or other elements to represent errors\n",
    "\n",
    "lattice = rift_lattice(lattice, \n",
    "                       'MONITOR', \n",
    "                       'MARKER', \n",
    "                       ['DRIFT'], \n",
    "                       ['SBEND', 'QUADRUPOLE'], \n",
    "                       exclude_virtual=['QD'])\n",
    "\n",
    "for key, value in lattice.items():\n",
    "    print(key, value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eac1cbc9-90b3-420e-84ce-c328fdc48b43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_DR: MONITOR,; ! DR: DRIFT, L=2.0,;\n",
      "H_DR: DRIFT, L=1.0,;\n",
      "DR: LINE=(H_DR, M_DR, H_DR);\n",
      "V_BM: MARKER,; ! BM: SBEND, L=1.0, ANGLE=0.17453292519943295,;\n",
      "H_BM: SBEND, L=0.5, ANGLE=0.08726646259971647,;\n",
      "BM: LINE=(H_BM, V_BM, H_BM);\n",
      "V_QF: MARKER,; ! QF: QUADRUPOLE, L=1.0, K1=0.2,;\n",
      "H_QF: QUADRUPOLE, L=0.5, K1=0.2,;\n",
      "QF: LINE=(H_QF, V_QF, H_QF);\n",
      "QD: QUADRUPOLE, L=0.5, K1=-0.2,;\n",
      "M: MONITOR,;\n",
      "HEAD: MARKER,; ! TEST: DRIFT,\n",
      "TAIL: MARKER,; ! TEST: DRIFT,\n",
      "FODO: LINE=(HEAD, M, QD, DR, BM, DR, QF, DR, BM, DR, QD, TAIL);\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Modified lattice can be converted to text\n",
    "# Comments are added to locations while original comments are preserved\n",
    "\n",
    "text = text_lattice('MADX', lattice, rc=True)\n",
    "\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0c98bea9-c894-4aed-8d62-97270eb048b2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Compute TWISS parameters using MADX\n",
    "# TWISS command is appended to modified lattice\n",
    "\n",
    "task = \"\"\"\n",
    "BEAM;\n",
    "USE, PERIOD=FODO;\n",
    "SET,FORMAT=\"20.20f\",\"-20s\";\n",
    "TWISS;\n",
    "WRITE,TABLE=TWISS,FILE=\"final.tfs\";\n",
    "RETURN;\n",
    "\"\"\" ;\n",
    "\n",
    "with Path('final.madx').open('w') as stream:\n",
    "    stream.write(text)\n",
    "    stream.write(task)\n",
    "\n",
    "!madx final.madx > /dev/null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3b46c59b-7001-4e0c-aa22-840f3a7302a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_DR {'KIND': 'MONITOR', 'RC': ['DR', {'KIND': 'DRIFT', 'RC': '', 'L': 2.0}]}\n",
      "H_DR {'KIND': 'DRIFT', 'RC': ['', {'KIND': '', 'RC': ''}], 'L': 1.0}\n",
      "DR {'KIND': 'LINE', 'SEQUENCE': ['H_DR', 'M_DR', 'H_DR']}\n",
      "V_BM {'KIND': 'MARKER', 'RC': ['BM', {'KIND': 'SBEND', 'RC': '', 'L': 1.0, 'ANGLE': 0.17453292519943295}]}\n",
      "H_BM {'KIND': 'SBEND', 'RC': ['', {'KIND': '', 'RC': ''}], 'L': 0.5, 'ANGLE': 0.08726646259971647}\n",
      "BM {'KIND': 'LINE', 'SEQUENCE': ['H_BM', 'V_BM', 'H_BM']}\n",
      "V_QF {'KIND': 'MARKER', 'RC': ['QF', {'KIND': 'QUADRUPOLE', 'RC': '', 'L': 1.0, 'K1': 0.2}]}\n",
      "H_QF {'KIND': 'QUADRUPOLE', 'RC': ['', {'KIND': '', 'RC': ''}], 'L': 0.5, 'K1': 0.2}\n",
      "QF {'KIND': 'LINE', 'SEQUENCE': ['H_QF', 'V_QF', 'H_QF']}\n",
      "QD {'KIND': 'QUADRUPOLE', 'RC': ['', {'KIND': '', 'RC': ''}], 'L': 0.5, 'K1': -0.2}\n",
      "M {'KIND': 'MONITOR', 'RC': ['', {'KIND': '', 'RC': ''}]}\n",
      "HEAD {'KIND': 'MARKER', 'RC': ['TEST', {'KIND': 'DRIFT', 'RC': ''}]}\n",
      "TAIL {'KIND': 'MARKER', 'RC': ['TEST', {'KIND': 'DRIFT', 'RC': ''}]}\n",
      "FODO {'KIND': 'LINE', 'SEQUENCE': ['HEAD', 'M', 'QD', 'DR', 'BM', 'DR', 'QF', 'DR', 'BM', 'DR', 'QD', 'TAIL']}\n"
     ]
    }
   ],
   "source": [
    "# Load lattice can be also loaded from file\n",
    "# Original comments will be parsed as elements (look at HEAD and TAIL)\n",
    "# Empty RC will be nested in this case\n",
    "\n",
    "file = Path('final.madx')\n",
    "\n",
    "with file.open('w') as stream:\n",
    "    stream.write(text)\n",
    "\n",
    "lattice = load_lattice(file, rc=True)\n",
    "\n",
    "for key, value in lattice.items():\n",
    "    print(key, value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dab4b669-0bfe-47ce-873d-51f064d98ec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# TWISS results can be loaded into python dictionaries\n",
    "\n",
    "data = Path('final.tfs')\n",
    "parameters, columns = load_tfs(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2ad82e92-25fe-4f44-bdb1-8709c3cf2570",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'HEAD': {'TYPE': 'VIRTUAL',\n",
       "  'S': 0.0,\n",
       "  'BX': 4.287017735718936,\n",
       "  'AX': -3.338e-16,\n",
       "  'FX': 0.0,\n",
       "  'BY': 19.818489282044894,\n",
       "  'AY': -2.975e-17,\n",
       "  'FY': 0.0,\n",
       "  'DQX': 1.5490410441348796,\n",
       "  'DPX': 5.551e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': -0.0,\n",
       "  'RC': None},\n",
       " 'M': {'TYPE': 'MONITOR',\n",
       "  'S': 0.0,\n",
       "  'BX': 4.287017735718936,\n",
       "  'AX': -3.338e-16,\n",
       "  'FX': 0.0,\n",
       "  'BY': 19.818489282044894,\n",
       "  'AY': -2.975e-17,\n",
       "  'FY': 0.0,\n",
       "  'DQX': 1.5490410441348796,\n",
       "  'DPX': 5.551e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': -0.0,\n",
       "  'RC': None},\n",
       " 'M_DR': {'TYPE': 'MONITOR',\n",
       "  'S': 1.5,\n",
       "  'BX': 5.980356480296974,\n",
       "  'AX': -0.8524040348462865,\n",
       "  'FX': 0.3068185833848285,\n",
       "  'BY': 15.315159900296642,\n",
       "  'AY': 1.6491678474974667,\n",
       "  'FY': 0.08453149247893033,\n",
       "  'DQX': 1.744126900814982,\n",
       "  'DPX': 0.1561982029636459,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'V_BM': {'TYPE': 'VIRTUAL',\n",
       "  'S': 3.0,\n",
       "  'BX': 9.120629409698159,\n",
       "  'AX': -1.1465687400023221,\n",
       "  'FX': 0.5107301354647854,\n",
       "  'BY': 10.914137614299745,\n",
       "  'AY': 1.2848470098337954,\n",
       "  'FY': 0.20081415045191314,\n",
       "  'DQX': 1.992896582518225,\n",
       "  'DPX': 0.21385269164968151,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'M_DR_1': {'TYPE': 'MONITOR',\n",
       "  'S': 4.5,\n",
       "  'BX': 12.70896979457465,\n",
       "  'AX': -1.3363966727488819,\n",
       "  'FX': 0.6500917125372264,\n",
       "  'BY': 7.606077841293864,\n",
       "  'AY': 0.9205261721701236,\n",
       "  'FY': 0.3661997931359615,\n",
       "  'DQX': 2.3837861006470566,\n",
       "  'DPX': 0.26987963222618605,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'V_QF': {'TYPE': 'VIRTUAL',\n",
       "  'S': 6.0,\n",
       "  'BX': 16.392007194825762,\n",
       "  'AX': -8.0415e-16,\n",
       "  'FX': 0.7521811118347426,\n",
       "  'BY': 5.674619594695141,\n",
       "  'AY': -2.5871e-16,\n",
       "  'FY': 0.601131166393595,\n",
       "  'DQX': 2.7214181783177667,\n",
       "  'DPX': 5.551e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'M_DR_2': {'TYPE': 'MONITOR',\n",
       "  'S': 7.5,\n",
       "  'BX': 12.708969794574653,\n",
       "  'AX': 1.336396672748881,\n",
       "  'FX': 0.8542705111322586,\n",
       "  'BY': 7.606077841293868,\n",
       "  'AY': -0.9205261721701244,\n",
       "  'FY': 0.8360625396512283,\n",
       "  'DQX': 2.3837861006470566,\n",
       "  'DPX': -0.26987963222618594,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'V_BM_1': {'TYPE': 'VIRTUAL',\n",
       "  'S': 9.0,\n",
       "  'BX': 9.120629409698164,\n",
       "  'AX': 1.146568740002322,\n",
       "  'FX': 0.9936320882046995,\n",
       "  'BY': 10.914137614299747,\n",
       "  'AY': -1.2848470098337954,\n",
       "  'FY': 1.0014481823352765,\n",
       "  'DQX': 1.9928965825182252,\n",
       "  'DPX': -0.21385269164968146,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'M_DR_3': {'TYPE': 'MONITOR',\n",
       "  'S': 10.5,\n",
       "  'BX': 5.980356480296976,\n",
       "  'AX': 0.8524040348462865,\n",
       "  'FX': 1.1975436402846564,\n",
       "  'BY': 15.315159900296639,\n",
       "  'AY': -1.6491678474974665,\n",
       "  'FY': 1.1177308403082595,\n",
       "  'DQX': 1.7441269008149822,\n",
       "  'DPX': -0.1561982029636459,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None},\n",
       " 'TAIL': {'TYPE': 'VIRTUAL',\n",
       "  'S': 12.0,\n",
       "  'BX': 4.287017735718939,\n",
       "  'AX': 3.6486e-16,\n",
       "  'FX': 1.5043622236694847,\n",
       "  'BY': 19.81848928204488,\n",
       "  'AY': -5.5051e-16,\n",
       "  'FY': 1.2022623327871897,\n",
       "  'DQX': 1.54904104413488,\n",
       "  'DPX': -2.776e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None}}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optics data can be converted into model table\n",
    "# Note, all locations have different name\n",
    "# If an element appear several times in a line, locations are renamed\n",
    "\n",
    "table = convert(columns, 'TFS', ['MONITOR'], ['MARKER'], rc=True)\n",
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1fefa5f3-e614-4e22-91ff-b21e28e4aeeb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'HEAD': {'TYPE': 'VIRTUAL',\n",
       "  'S': 0.0,\n",
       "  'BX': 4.287017735718936,\n",
       "  'AX': -3.338e-16,\n",
       "  'FX': 0.0,\n",
       "  'BY': 19.818489282044894,\n",
       "  'AY': -2.975e-17,\n",
       "  'FY': 0.0,\n",
       "  'DQX': 1.5490410441348796,\n",
       "  'DPX': 5.551e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': -0.0,\n",
       "  'RC': None},\n",
       " 'M': {'TYPE': 'MONITOR',\n",
       "  'S': 0.0,\n",
       "  'BX': 4.287017735718936,\n",
       "  'AX': -3.338e-16,\n",
       "  'FX': 0.0,\n",
       "  'BY': 19.818489282044894,\n",
       "  'AY': -2.975e-17,\n",
       "  'FY': 0.0,\n",
       "  'DQX': 1.5490410441348796,\n",
       "  'DPX': 5.551e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': -0.0,\n",
       "  'RC': None},\n",
       " 'M_DR': {'TYPE': 'MONITOR',\n",
       "  'S': 1.5,\n",
       "  'BX': 5.980356480296974,\n",
       "  'AX': -0.8524040348462865,\n",
       "  'FX': 0.3068185833848285,\n",
       "  'BY': 15.315159900296642,\n",
       "  'AY': 1.6491678474974667,\n",
       "  'FY': 0.08453149247893033,\n",
       "  'DQX': 1.744126900814982,\n",
       "  'DPX': 0.1561982029636459,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['DR', {'KIND': 'DRIFT', 'L': 2.0}]},\n",
       " 'V_BM': {'TYPE': 'VIRTUAL',\n",
       "  'S': 3.0,\n",
       "  'BX': 9.120629409698159,\n",
       "  'AX': -1.1465687400023221,\n",
       "  'FX': 0.5107301354647854,\n",
       "  'BY': 10.914137614299745,\n",
       "  'AY': 1.2848470098337954,\n",
       "  'FY': 0.20081415045191314,\n",
       "  'DQX': 1.992896582518225,\n",
       "  'DPX': 0.21385269164968151,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['BM', {'KIND': 'SBEND', 'L': 1.0, 'ANGLE': 0.17453292519943295}]},\n",
       " 'M_DR_1': {'TYPE': 'MONITOR',\n",
       "  'S': 4.5,\n",
       "  'BX': 12.70896979457465,\n",
       "  'AX': -1.3363966727488819,\n",
       "  'FX': 0.6500917125372264,\n",
       "  'BY': 7.606077841293864,\n",
       "  'AY': 0.9205261721701236,\n",
       "  'FY': 0.3661997931359615,\n",
       "  'DQX': 2.3837861006470566,\n",
       "  'DPX': 0.26987963222618605,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['DR', {'KIND': 'DRIFT', 'L': 2.0}]},\n",
       " 'V_QF': {'TYPE': 'VIRTUAL',\n",
       "  'S': 6.0,\n",
       "  'BX': 16.392007194825762,\n",
       "  'AX': -8.0415e-16,\n",
       "  'FX': 0.7521811118347426,\n",
       "  'BY': 5.674619594695141,\n",
       "  'AY': -2.5871e-16,\n",
       "  'FY': 0.601131166393595,\n",
       "  'DQX': 2.7214181783177667,\n",
       "  'DPX': 5.551e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['QF', {'KIND': 'QUADRUPOLE', 'L': 1.0, 'K1': 0.2}]},\n",
       " 'M_DR_2': {'TYPE': 'MONITOR',\n",
       "  'S': 7.5,\n",
       "  'BX': 12.708969794574653,\n",
       "  'AX': 1.336396672748881,\n",
       "  'FX': 0.8542705111322586,\n",
       "  'BY': 7.606077841293868,\n",
       "  'AY': -0.9205261721701244,\n",
       "  'FY': 0.8360625396512283,\n",
       "  'DQX': 2.3837861006470566,\n",
       "  'DPX': -0.26987963222618594,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['DR', {'KIND': 'DRIFT', 'L': 2.0}]},\n",
       " 'V_BM_1': {'TYPE': 'VIRTUAL',\n",
       "  'S': 9.0,\n",
       "  'BX': 9.120629409698164,\n",
       "  'AX': 1.146568740002322,\n",
       "  'FX': 0.9936320882046995,\n",
       "  'BY': 10.914137614299747,\n",
       "  'AY': -1.2848470098337954,\n",
       "  'FY': 1.0014481823352765,\n",
       "  'DQX': 1.9928965825182252,\n",
       "  'DPX': -0.21385269164968146,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['BM', {'KIND': 'SBEND', 'L': 1.0, 'ANGLE': 0.17453292519943295}]},\n",
       " 'M_DR_3': {'TYPE': 'MONITOR',\n",
       "  'S': 10.5,\n",
       "  'BX': 5.980356480296976,\n",
       "  'AX': 0.8524040348462865,\n",
       "  'FX': 1.1975436402846564,\n",
       "  'BY': 15.315159900296639,\n",
       "  'AY': -1.6491678474974665,\n",
       "  'FY': 1.1177308403082595,\n",
       "  'DQX': 1.7441269008149822,\n",
       "  'DPX': -0.1561982029636459,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': ['DR', {'KIND': 'DRIFT', 'L': 2.0}]},\n",
       " 'TAIL': {'TYPE': 'VIRTUAL',\n",
       "  'S': 12.0,\n",
       "  'BX': 4.287017735718939,\n",
       "  'AX': 3.6486e-16,\n",
       "  'FX': 1.5043622236694847,\n",
       "  'BY': 19.81848928204488,\n",
       "  'AY': -5.5051e-16,\n",
       "  'FY': 1.2022623327871897,\n",
       "  'DQX': 1.54904104413488,\n",
       "  'DPX': -2.776e-17,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'RC': None}}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# RC parameter from lattice data can be added to model table\n",
    "# Configuration table can be saved using util.save\n",
    "\n",
    "table = add_rc(table, lattice)\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70706793-5a95-4598-8d45-2208eb0a54fd",
   "metadata": {},
   "source": [
    "# Example-03: Workflow (ELEGANT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7155f5d-e16a-4374-979a-b3477eee7a55",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "from model.external import load_lattice\n",
    "from model.external import rift_lattice\n",
    "from model.external import text_lattice\n",
    "from model.external import load_sdds\n",
    "from model.external import convert\n",
    "from model.external import add_rc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7f0167ee-1eb5-4a03-a06e-c6256c2f08a2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DR: DRIF,l=2\n",
      "\n",
      "BM: CSBEND,angle=0.17453292519943295,fint=0,l=1.0\n",
      "QD: QUAD,k1=-0.2,l=0.5\n",
      "QF: QUAD,k1=0.2,l=1.0\n",
      "\n",
      "M: MONI,\n",
      "\n",
      "HEAD: MARK, ! TEST: DRIF,\n",
      "TAIL: MARK, ! TEST: DRIF,\n",
      "\n",
      "FODO: LINE=(HEAD, M, QD, DR, BM, DR, QF, DR, BM, DR, QD, TAIL)\n"
     ]
    }
   ],
   "source": [
    "# Given some initial ELEGANT lattice file (FODO)\n",
    "\n",
    "file = Path('initial.lte')\n",
    "\n",
    "with file.open('r') as stream:\n",
    "    print(stream.read())\n",
    "\n",
    "# Several regular elements are defined\n",
    "# HEAD and TAIL should appear as the first and the last elements\n",
    "# All elements should be defined on a single line with numerical parameters\n",
    "# Lattice should be defined using lines\n",
    "# Comma after element type is mandatory\n",
    "# Comments appearing after definitions should also represent an element definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "39ce25e6-47b7-4ec8-960c-b21b60fd99d6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DR {'KIND': 'DRIF', 'RC': '', 'L': 2}\n",
      "BM {'KIND': 'CSBEND', 'RC': '', 'ANGLE': 0.17453292519943295, 'FINT': 0, 'L': 1.0}\n",
      "QD {'KIND': 'QUAD', 'RC': '', 'K1': -0.2, 'L': 0.5}\n",
      "QF {'KIND': 'QUAD', 'RC': '', 'K1': 0.2, 'L': 1.0}\n",
      "M {'KIND': 'MONI', 'RC': ''}\n",
      "HEAD {'KIND': 'MARK', 'RC': 'TEST: DRIF,'}\n",
      "TAIL {'KIND': 'MARK', 'RC': 'TEST: DRIF,'}\n",
      "FODO {'KIND': 'LINE', 'SEQUENCE': ['HEAD', 'M', 'QD', 'DR', 'BM', 'DR', 'QF', 'DR', 'BM', 'DR', 'QD', 'TAIL']}\n"
     ]
    }
   ],
   "source": [
    "# If element and beamline definitions comply with the above requirements\n",
    "# The lattice file can be loaded as a python dictionary\n",
    "\n",
    "lattice = load_lattice(file)\n",
    "\n",
    "for key, value in lattice.items():\n",
    "    print(key, value)\n",
    "\n",
    "# For each element and beamline, a key-value pair in created\n",
    "# Value is itself a dictionary containing all information about the original elements\n",
    "# Each element parameter is casted from string to int, float or string\n",
    "# Comment after element definition is saved into RC (it has a special use case, see below)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e0b8b369-29dc-4dc8-859b-658a0a17545e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_DR {'KIND': 'MONI', 'RC': ['DR', {'KIND': 'DRIF', 'L': 2}]}\n",
      "H_DR {'KIND': 'DRIF', 'L': 1.0}\n",
      "DR {'KIND': 'LINE', 'SEQUENCE': ['H_DR', 'M_DR', 'H_DR']}\n",
      "V_BM {'KIND': 'MARK', 'RC': ['BM', {'KIND': 'CSBEND', 'ANGLE': 0.17453292519943295, 'FINT': 0, 'L': 1.0}]}\n",
      "H_BM {'KIND': 'CSBEND', 'ANGLE': 0.08726646259971647, 'FINT': 0, 'L': 0.5}\n",
      "BM {'KIND': 'LINE', 'SEQUENCE': ['H_BM', 'V_BM', 'H_BM']}\n",
      "QD {'KIND': 'QUAD', 'RC': '', 'K1': -0.2, 'L': 0.5}\n",
      "V_QF {'KIND': 'MARK', 'RC': ['QF', {'KIND': 'QUAD', 'K1': 0.2, 'L': 1.0}]}\n",
      "H_QF {'KIND': 'QUAD', 'K1': 0.2, 'L': 0.5}\n",
      "QF {'KIND': 'LINE', 'SEQUENCE': ['H_QF', 'V_QF', 'H_QF']}\n",
      "M {'KIND': 'MONI', 'RC': ''}\n",
      "HEAD {'KIND': 'MARK', 'RC': 'TEST: DRIF,'}\n",
      "TAIL {'KIND': 'MARK', 'RC': 'TEST: DRIF,'}\n",
      "FODO {'KIND': 'LINE', 'SEQUENCE': ['HEAD', 'M', 'QD', 'DR', 'BM', 'DR', 'QF', 'DR', 'BM', 'DR', 'QD', 'TAIL']}\n"
     ]
    }
   ],
   "source": [
    "# Error lattice is defined by a set of linear transformations between selected locations\n",
    "# Each locations can be a MONITOR (beam observation) or a VIRTUAL (error)\n",
    "# Two special locatons (HEAD and TAIL) should present in the lattice\n",
    "# Using the above dictionary representation, new observation locations can be inserted\n",
    "# Locations are inserted at the middle of selected elements (selected by type or name)\n",
    "# Selected elements are splitted in half and renamed, old names are binded to beamlines\n",
    "# Original element definitions are added to created location RC\n",
    "# Typicaly, monitor locations correspond to MONITOR elements, but new monitor elements can be also inserted\n",
    "# Virtual locations can be inserted into quadrupole or other elements to represent errors\n",
    "\n",
    "lattice = rift_lattice(lattice, \n",
    "                       'MONI', \n",
    "                       'MARK', \n",
    "                       ['DRIF'], \n",
    "                       ['CSBEND', 'QUAD'], \n",
    "                       exclude_virtual=['QD'])\n",
    "\n",
    "for key, value in lattice.items():\n",
    "    print(key, value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e7f72d66-2ac0-4a6f-b12d-45410acd13f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_DR: MONI, ! DR: DRIF, L=2,\n",
      "H_DR: DRIF, L=1.0,\n",
      "DR: LINE=(H_DR, M_DR, H_DR)\n",
      "V_BM: MARK, ! BM: CSBEND, ANGLE=0.17453292519943295, FINT=0, L=1.0,\n",
      "H_BM: CSBEND, ANGLE=0.08726646259971647, FINT=0, L=0.5,\n",
      "BM: LINE=(H_BM, V_BM, H_BM)\n",
      "QD: QUAD, K1=-0.2, L=0.5,\n",
      "V_QF: MARK, ! QF: QUAD, K1=0.2, L=1.0,\n",
      "H_QF: QUAD, K1=0.2, L=0.5,\n",
      "QF: LINE=(H_QF, V_QF, H_QF)\n",
      "M: MONI,\n",
      "HEAD: MARK, ! TEST: DRIF,\n",
      "TAIL: MARK, ! TEST: DRIF,\n",
      "FODO: LINE=(HEAD, M, QD, DR, BM, DR, QF, DR, BM, DR, QD, TAIL)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Modified lattice can be converted to text\n",
    "# Comments are added to locations while original comments are preserved\n",
    "\n",
    "text = text_lattice('LTE', lattice, rc=True)\n",
    "\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4ec13d02-ae33-4d58-ade9-125c00fcc90a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Compute TWISS parameters using ELEGANT\n",
    "# Separate command file is created\n",
    "\n",
    "with Path('final.lte').open('w') as stream:\n",
    "    stream.write(text)\n",
    "\n",
    "task = \"\"\"\n",
    "&run_setup\n",
    "  use_beamline=\"FODO\",\n",
    "  lattice = \"final.lte\",\n",
    "  p_central_mev = 1000\n",
    "&end\n",
    "\n",
    "&run_control\n",
    "&end\n",
    "\n",
    "&twiss_output\n",
    "  filename = \"binary.twiss\",\n",
    "  output_at_each_step = 1\n",
    "&end\n",
    "\n",
    "&bunched_beam\n",
    "&end\n",
    "\n",
    "&track\n",
    "&end\n",
    "\"\"\" ;\n",
    "\n",
    "with Path('final.ele').open('w') as stream:\n",
    "    stream.write(task)\n",
    "\n",
    "!elegant final.ele > /dev/null\n",
    "!sddsconvert -ascii binary.twiss final.twiss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "86013097-d261-486b-b2af-35f9604b6351",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_DR {'KIND': 'MONI', 'RC': ['DR', {'KIND': 'DRIF', 'RC': '', 'L': 2}]}\n",
      "H_DR {'KIND': 'DRIF', 'RC': ['', {'KIND': '', 'RC': ''}], 'L': 1.0}\n",
      "DR {'KIND': 'LINE', 'SEQUENCE': ['H_DR', 'M_DR', 'H_DR']}\n",
      "V_BM {'KIND': 'MARK', 'RC': ['BM', {'KIND': 'CSBEND', 'RC': '', 'ANGLE': 0.17453292519943295, 'FINT': 0, 'L': 1.0}]}\n",
      "H_BM {'KIND': 'CSBEND', 'RC': ['', {'KIND': '', 'RC': ''}], 'ANGLE': 0.08726646259971647, 'FINT': 0, 'L': 0.5}\n",
      "BM {'KIND': 'LINE', 'SEQUENCE': ['H_BM', 'V_BM', 'H_BM']}\n",
      "QD {'KIND': 'QUAD', 'RC': ['', {'KIND': '', 'RC': ''}], 'K1': -0.2, 'L': 0.5}\n",
      "V_QF {'KIND': 'MARK', 'RC': ['QF', {'KIND': 'QUAD', 'RC': '', 'K1': 0.2, 'L': 1.0}]}\n",
      "H_QF {'KIND': 'QUAD', 'RC': ['', {'KIND': '', 'RC': ''}], 'K1': 0.2, 'L': 0.5}\n",
      "QF {'KIND': 'LINE', 'SEQUENCE': ['H_QF', 'V_QF', 'H_QF']}\n",
      "M {'KIND': 'MONI', 'RC': ['', {'KIND': '', 'RC': ''}]}\n",
      "HEAD {'KIND': 'MARK', 'RC': ['TEST', {'KIND': 'DRIF', 'RC': ''}]}\n",
      "TAIL {'KIND': 'MARK', 'RC': ['TEST', {'KIND': 'DRIF', 'RC': ''}]}\n",
      "FODO {'KIND': 'LINE', 'SEQUENCE': ['HEAD', 'M', 'QD', 'DR', 'BM', 'DR', 'QF', 'DR', 'BM', 'DR', 'QD', 'TAIL']}\n"
     ]
    }
   ],
   "source": [
    "# Load lattice can be also loaded from file\n",
    "# Original comments will be parsed as elements (look at HEAD and TAIL)\n",
    "# Empty RC will be nested in this case\n",
    "\n",
    "file = Path('final.lte')\n",
    "\n",
    "with file.open('w') as stream:\n",
    "    stream.write(text)\n",
    "\n",
    "lattice = load_lattice(file, rc=True)\n",
    "\n",
    "for key, value in lattice.items():\n",
    "    print(key, value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e299a720-b7ad-4cbb-b281-014ad87322fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# TWISS results can be loaded into python dictionaries\n",
    "\n",
    "data = Path('final.twiss')\n",
    "parameters, columns = load_sdds(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8cd4345e-effb-48f1-ad46-c824e242d55f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'HEAD': {'S': 0.0,\n",
       "  'BX': 4.287017734831204,\n",
       "  'AX': -1.321304551729011e-16,\n",
       "  'FX': 0.0,\n",
       "  'DQX': 1.549040841795901,\n",
       "  'DPX': 2.775557561562891e-17,\n",
       "  'BY': 19.81848926815186,\n",
       "  'AY': 6.545730027929358e-16,\n",
       "  'FY': 0.0,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None},\n",
       " 'M': {'S': 0.0,\n",
       "  'BX': 4.287017734831204,\n",
       "  'AX': -1.321304551729011e-16,\n",
       "  'FX': 0.0,\n",
       "  'DQX': 1.549040841795901,\n",
       "  'DPX': 2.775557561562891e-17,\n",
       "  'BY': 19.81848926815186,\n",
       "  'AY': 6.545730027929358e-16,\n",
       "  'FY': 0.0,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': None},\n",
       " 'M_DR': {'S': 1.5,\n",
       "  'BX': 5.980356479284525,\n",
       "  'AX': -0.8524040348212205,\n",
       "  'FX': 0.3068185834444499,\n",
       "  'DQX': 1.744126672993481,\n",
       "  'DPX': 0.1561981825607101,\n",
       "  'BY': 15.31515988971357,\n",
       "  'AY': 1.649167846239909,\n",
       "  'FY': 0.08453149253790615,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': None},\n",
       " 'V_BM': {'S': 3.0,\n",
       "  'BX': 9.120629409314306,\n",
       "  'AX': -1.146568740048648,\n",
       "  'FX': 0.5107301355818847,\n",
       "  'DQX': 1.99289632225274,\n",
       "  'DPX': 0.2138526637243729,\n",
       "  'BY': 10.91413760701325,\n",
       "  'AY': 1.284847009200138,\n",
       "  'FY': 0.2008141505892614,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None},\n",
       " 'M_DR_1': {'S': 4.5,\n",
       "  'BX': 12.70896979491113,\n",
       "  'AX': -1.336396672789745,\n",
       "  'FX': 0.6500917126795847,\n",
       "  'DQX': 2.383785789407781,\n",
       "  'DPX': 0.2698795969893243,\n",
       "  'BY': 7.606077834992553,\n",
       "  'AY': 0.9205261718281931,\n",
       "  'FY': 0.3661997933967667,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': None},\n",
       " 'V_QF': {'S': 6.0,\n",
       "  'BX': 16.39200719526896,\n",
       "  'AX': 3.608224830031759e-16,\n",
       "  'FX': 0.7521811119743597,\n",
       "  'DQX': 2.721417822995524,\n",
       "  'DPX': -5.551115123125783e-17,\n",
       "  'BY': 5.674619589422572,\n",
       "  'AY': 8.326672684688672e-16,\n",
       "  'FY': 0.6011311668647427,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None},\n",
       " 'M_DR_2': {'S': 7.5,\n",
       "  'BX': 12.70896979491113,\n",
       "  'AX': 1.336396672789746,\n",
       "  'FX': 0.8542705112691347,\n",
       "  'DQX': 2.383785789407781,\n",
       "  'DPX': -0.2698795969893243,\n",
       "  'BY': 7.606077834992548,\n",
       "  'AY': -0.920526171828191,\n",
       "  'FY': 0.8360625403327188,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': None},\n",
       " 'V_BM_1': {'S': 9.0,\n",
       "  'BX': 9.120629409314306,\n",
       "  'AX': 1.146568740048649,\n",
       "  'FX': 0.9936320883668346,\n",
       "  'DQX': 1.992896322252739,\n",
       "  'DPX': -0.2138526637243729,\n",
       "  'BY': 10.91413760701323,\n",
       "  'AY': -1.284847009200136,\n",
       "  'FY': 1.001448183140224,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None},\n",
       " 'M_DR_3': {'S': 10.5,\n",
       "  'BX': 5.980356479284523,\n",
       "  'AX': 0.852404034821221,\n",
       "  'FX': 1.197543640504269,\n",
       "  'DQX': 1.744126672993481,\n",
       "  'DPX': -0.1561981825607101,\n",
       "  'BY': 15.31515988971355,\n",
       "  'AY': -1.649167846239906,\n",
       "  'FY': 1.11773084119158,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': None},\n",
       " 'TAIL': {'S': 12.0,\n",
       "  'BX': 4.287017734831201,\n",
       "  'AX': 5.273559366969493e-16,\n",
       "  'FX': 1.50436222394872,\n",
       "  'DQX': 1.549040841795901,\n",
       "  'DPX': -1.110223024625157e-16,\n",
       "  'BY': 19.81848926815184,\n",
       "  'AY': 1.387778780781446e-16,\n",
       "  'FY': 1.202262333729486,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None}}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optics data can be converted into model table\n",
    "# Note, all locations have different name\n",
    "# If an element appear several times in a line, locations are renamed\n",
    "\n",
    "table = convert(columns, 'SDDS', ['MONI'], ['MARK'], rc=True)\n",
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f6d4a121-8d34-4db1-8c09-dbb1fd13317a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'HEAD': {'S': 0.0,\n",
       "  'BX': 4.287017734831204,\n",
       "  'AX': -1.321304551729011e-16,\n",
       "  'FX': 0.0,\n",
       "  'DQX': 1.549040841795901,\n",
       "  'DPX': 2.775557561562891e-17,\n",
       "  'BY': 19.81848926815186,\n",
       "  'AY': 6.545730027929358e-16,\n",
       "  'FY': 0.0,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None},\n",
       " 'M': {'S': 0.0,\n",
       "  'BX': 4.287017734831204,\n",
       "  'AX': -1.321304551729011e-16,\n",
       "  'FX': 0.0,\n",
       "  'DQX': 1.549040841795901,\n",
       "  'DPX': 2.775557561562891e-17,\n",
       "  'BY': 19.81848926815186,\n",
       "  'AY': 6.545730027929358e-16,\n",
       "  'FY': 0.0,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': None},\n",
       " 'M_DR': {'S': 1.5,\n",
       "  'BX': 5.980356479284525,\n",
       "  'AX': -0.8524040348212205,\n",
       "  'FX': 0.3068185834444499,\n",
       "  'DQX': 1.744126672993481,\n",
       "  'DPX': 0.1561981825607101,\n",
       "  'BY': 15.31515988971357,\n",
       "  'AY': 1.649167846239909,\n",
       "  'FY': 0.08453149253790615,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': ['DR', {'KIND': 'DRIF', 'L': 2}]},\n",
       " 'V_BM': {'S': 3.0,\n",
       "  'BX': 9.120629409314306,\n",
       "  'AX': -1.146568740048648,\n",
       "  'FX': 0.5107301355818847,\n",
       "  'DQX': 1.99289632225274,\n",
       "  'DPX': 0.2138526637243729,\n",
       "  'BY': 10.91413760701325,\n",
       "  'AY': 1.284847009200138,\n",
       "  'FY': 0.2008141505892614,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': ['BM',\n",
       "   {'KIND': 'CSBEND', 'ANGLE': 0.17453292519943295, 'FINT': 0, 'L': 1.0}]},\n",
       " 'M_DR_1': {'S': 4.5,\n",
       "  'BX': 12.70896979491113,\n",
       "  'AX': -1.336396672789745,\n",
       "  'FX': 0.6500917126795847,\n",
       "  'DQX': 2.383785789407781,\n",
       "  'DPX': 0.2698795969893243,\n",
       "  'BY': 7.606077834992553,\n",
       "  'AY': 0.9205261718281931,\n",
       "  'FY': 0.3661997933967667,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': ['DR', {'KIND': 'DRIF', 'L': 2}]},\n",
       " 'V_QF': {'S': 6.0,\n",
       "  'BX': 16.39200719526896,\n",
       "  'AX': 3.608224830031759e-16,\n",
       "  'FX': 0.7521811119743597,\n",
       "  'DQX': 2.721417822995524,\n",
       "  'DPX': -5.551115123125783e-17,\n",
       "  'BY': 5.674619589422572,\n",
       "  'AY': 8.326672684688672e-16,\n",
       "  'FY': 0.6011311668647427,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': ['QF', {'KIND': 'QUAD', 'K1': 0.2, 'L': 1.0}]},\n",
       " 'M_DR_2': {'S': 7.5,\n",
       "  'BX': 12.70896979491113,\n",
       "  'AX': 1.336396672789746,\n",
       "  'FX': 0.8542705112691347,\n",
       "  'DQX': 2.383785789407781,\n",
       "  'DPX': -0.2698795969893243,\n",
       "  'BY': 7.606077834992548,\n",
       "  'AY': -0.920526171828191,\n",
       "  'FY': 0.8360625403327188,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': ['DR', {'KIND': 'DRIF', 'L': 2}]},\n",
       " 'V_BM_1': {'S': 9.0,\n",
       "  'BX': 9.120629409314306,\n",
       "  'AX': 1.146568740048649,\n",
       "  'FX': 0.9936320883668346,\n",
       "  'DQX': 1.992896322252739,\n",
       "  'DPX': -0.2138526637243729,\n",
       "  'BY': 10.91413760701323,\n",
       "  'AY': -1.284847009200136,\n",
       "  'FY': 1.001448183140224,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': ['BM',\n",
       "   {'KIND': 'CSBEND', 'ANGLE': 0.17453292519943295, 'FINT': 0, 'L': 1.0}]},\n",
       " 'M_DR_3': {'S': 10.5,\n",
       "  'BX': 5.980356479284523,\n",
       "  'AX': 0.852404034821221,\n",
       "  'FX': 1.197543640504269,\n",
       "  'DQX': 1.744126672993481,\n",
       "  'DPX': -0.1561981825607101,\n",
       "  'BY': 15.31515988971355,\n",
       "  'AY': -1.649167846239906,\n",
       "  'FY': 1.11773084119158,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'MONITOR',\n",
       "  'RC': ['DR', {'KIND': 'DRIF', 'L': 2}]},\n",
       " 'TAIL': {'S': 12.0,\n",
       "  'BX': 4.287017734831201,\n",
       "  'AX': 5.273559366969493e-16,\n",
       "  'FX': 1.50436222394872,\n",
       "  'DQX': 1.549040841795901,\n",
       "  'DPX': -1.110223024625157e-16,\n",
       "  'BY': 19.81848926815184,\n",
       "  'AY': 1.387778780781446e-16,\n",
       "  'FY': 1.202262333729486,\n",
       "  'DQY': 0.0,\n",
       "  'DPY': 0.0,\n",
       "  'TYPE': 'VIRTUAL',\n",
       "  'RC': None}}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# RC parameter from lattice data can be added to model table\n",
    "# Configuration table can be saved using util.save\n",
    "\n",
    "table = add_rc(table, lattice)\n",
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb0250f7-d1f5-47ac-ae2f-c311735121fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
