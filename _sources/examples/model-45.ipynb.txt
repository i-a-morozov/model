{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "262a5ec8-2553-4237-ab62-319b6ca22089",
   "metadata": {},
   "source": [
    "# Example-46: Twiss (Optics correction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "89f1b2d0-d62c-40f0-aa24-98a15e78976c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this example model response matrices of normal and chromatic Twiss parameters are used for correction\n",
    "# ML style optimization is also performed for optics correction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "465011b9-bb27-4fd5-919a-3923ae103a71",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import\n",
    "\n",
    "from pprint import pprint\n",
    "\n",
    "import torch\n",
    "from torch import Tensor\n",
    "from torch.utils.data import TensorDataset\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "import matplotlib\n",
    "from matplotlib import pyplot as plt\n",
    "matplotlib.rcParams['text.usetex'] = True\n",
    "\n",
    "from model.library.line import Line\n",
    "\n",
    "from model.command.util import select\n",
    "\n",
    "from model.command.external import load_sdds\n",
    "from model.command.external import load_lattice\n",
    "\n",
    "from model.command.build import build\n",
    "\n",
    "from model.command.wrapper import group\n",
    "from model.command.wrapper import forward\n",
    "from model.command.wrapper import inverse\n",
    "from model.command.wrapper import normalize\n",
    "from model.command.wrapper import Wrapper\n",
    "\n",
    "from model.command.tune import tune\n",
    "from model.command.twiss import twiss\n",
    "from model.command.twiss import chromatic_twiss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aa613d87-34ee-4349-b29e-9ce7603b2e29",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load ELEGANT twiss\n",
    "\n",
    "path = Path('ic.twiss')\n",
    "parameters, columns = load_sdds(path)\n",
    "\n",
    "nu_qx:Tensor = torch.tensor(parameters['nux'] % 1, dtype=torch.float64)\n",
    "nu_qy:Tensor = torch.tensor(parameters['nuy'] % 1, dtype=torch.float64)\n",
    "\n",
    "# Set twiss parameters at BPMs\n",
    "\n",
    "kinds = select(columns, 'ElementType', keep=False)\n",
    "\n",
    "a_qx = select(columns, 'alphax', keep=False)\n",
    "b_qx = select(columns, 'betax' , keep=False)\n",
    "a_qy = select(columns, 'alphay', keep=False)\n",
    "b_qy = select(columns, 'betay' , keep=False)\n",
    "\n",
    "a_qx:Tensor = torch.tensor([value for (key, value), kind in zip(a_qx.items(), kinds.values()) if kind == 'MONI'], dtype=torch.float64)\n",
    "b_qx:Tensor = torch.tensor([value for (key, value), kind in zip(b_qx.items(), kinds.values()) if kind == 'MONI'], dtype=torch.float64)\n",
    "a_qy:Tensor = torch.tensor([value for (key, value), kind in zip(a_qy.items(), kinds.values()) if kind == 'MONI'], dtype=torch.float64)\n",
    "b_qy:Tensor = torch.tensor([value for (key, value), kind in zip(b_qy.items(), kinds.values()) if kind == 'MONI'], dtype=torch.float64)\n",
    "\n",
    "positions = select(columns, 's', keep=False).items()\n",
    "positions = [value for (key, value), kind in zip(positions, kinds.values()) if kind == 'MONI']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c948e8c4-a0bb-48ac-a3fa-6677b0a5e02d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build and setup lattice\n",
    "\n",
    "# Load ELEGANT table\n",
    "\n",
    "path = Path('ic.lte')\n",
    "data = load_lattice(path)\n",
    "\n",
    "# Build ELEGANT table\n",
    "\n",
    "ring:Line = build('RING', 'ELEGANT', data)\n",
    "ring.flatten()\n",
    "\n",
    "# Merge drifts\n",
    "\n",
    "ring.merge()\n",
    "\n",
    "# Split BPMs\n",
    "\n",
    "ring.split((None, ['BPM'], None, None))\n",
    "\n",
    "# Roll lattice start\n",
    "\n",
    "ring.roll(1)\n",
    "\n",
    "# Set linear dipoles\n",
    "\n",
    "for element in ring:\n",
    "    if element.__class__.__name__ == 'Dipole':\n",
    "        element.linear = True\n",
    "\n",
    "# Split lattice into lines by BPMs\n",
    "\n",
    "ring.splice()\n",
    "\n",
    "# Set number of elements of different kinds\n",
    "\n",
    "nb = ring.describe['BPM']\n",
    "nq = ring.describe['Quadrupole']\n",
    "ns = ring.describe['Sextupole']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c01bdb6a-3831-4696-8781-adeacb8c418a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# Compare tunes\n",
    "\n",
    "nuqx, nuqy = tune(ring, [], alignment=False, matched=True)\n",
    "\n",
    "print(torch.allclose(nu_qx, nuqx))\n",
    "print(torch.allclose(nu_qy, nuqy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ace743e7-4133-4b67-a98d-ebab26964da8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# Compare twiss\n",
    "\n",
    "aqx, bqx, aqy, bqy = twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "\n",
    "print(torch.allclose(a_qx, aqx))\n",
    "print(torch.allclose(b_qx, bqx))\n",
    "print(torch.allclose(a_qy, aqy))\n",
    "print(torch.allclose(b_qy, bqy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cd4930e5-e0c1-4346-a1c4-c0561aeaf9cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[-0.0893,  0.4014,  1.2554, -0.9068, -1.5491, -0.9866, -0.6147, -0.7071,\n",
      "         -1.9186,  0.2045, -0.1659,  0.4221,  1.9239,  2.2147,  0.5854, -0.4487,\n",
      "         -0.4684, -1.9595, -0.0112, -0.2204, -0.9209, -1.5967, -0.0541,  1.5081,\n",
      "          0.5988, -0.3222, -0.4638,  0.8415],\n",
      "        [ 0.0182,  0.1496,  0.5733, -0.6730, -0.7756, -0.5178, -0.4104, -0.5325,\n",
      "         -0.9651,  0.2699, -0.0145,  0.1734,  0.9035,  1.1954,  0.3374, -0.2984,\n",
      "         -0.4055, -1.0062,  0.1660, -0.0147, -0.4518, -0.8235,  0.1829,  0.8281,\n",
      "          0.3562, -0.2319, -0.4848,  0.2358],\n",
      "        [ 1.6183, -0.0219, -0.2993, -0.0049,  0.3526,  0.2005, -0.5750, -0.4693,\n",
      "          0.1832,  0.0065, -0.5948, -2.2667, -0.8472,  0.8119,  2.2819,  0.7206,\n",
      "          0.0759, -0.2127,  0.4684,  0.6358, -0.0792, -0.2893, -0.0394,  0.3584,\n",
      "          0.2001, -1.2685, -0.6598,  0.2486],\n",
      "        [-0.7202,  0.1496,  0.2258, -0.0342, -0.1608, -0.0228,  0.3921,  0.2789,\n",
      "         -0.1348,  0.0622,  0.4565,  1.3632,  0.4758, -0.5180, -1.3618, -0.3315,\n",
      "          0.0206,  0.1024, -0.2828, -0.3332,  0.1447,  0.2237, -0.0135, -0.1681,\n",
      "          0.0184,  1.0088,  0.4647, -0.2653]], dtype=torch.float64)\n",
      "\n",
      "tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "         0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "         0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "         0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "         0., 0., 0., 0.]], dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test derivatives with respect kn and ks at the lattice start\n",
    "\n",
    "kn = torch.zeros(nq, dtype=torch.float64)\n",
    "ks = torch.zeros(nq, dtype=torch.float64)\n",
    "\n",
    "pprint(torch.func.jacrev(lambda kn: twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), matched=True))(kn))\n",
    "print()\n",
    "\n",
    "pprint(torch.func.jacrev(lambda ks: twiss(ring, [ks], ('ks', ['Quadrupole'], None, None), matched=True))(ks))\n",
    "print()\n",
    "\n",
    "# Note, first order derivatives with respect to ks are identicaly equal to zero as expected\n",
    "# Second order derivative is not identicaly equal to zero in general\n",
    "# In the following, only first order derivatives are used for optics correctios (lattice without coupling)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7afc08d7-2bc1-4dca-b0fe-08632d4167c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([16, 4, 28])\n",
      "torch.Size([16, 4, 28])\n"
     ]
    }
   ],
   "source": [
    "# Compute twiss derivatives with respect to quadrupole settings (normal and chromatic)\n",
    "\n",
    "def fn_dtwiss_dkn(kn):\n",
    "    return twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "def fn_dtwiss_dp_dkn(kn):\n",
    "    return chromatic_twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "kn = torch.zeros(nq, dtype=torch.float64)\n",
    "\n",
    "dtwiss_dkn = torch.func.jacrev(fn_dtwiss_dkn)(kn)\n",
    "dtwiss_dp_dkn = torch.func.jacrev(fn_dtwiss_dp_dkn)(kn)\n",
    "\n",
    "print(dtwiss_dkn.shape)\n",
    "print(dtwiss_dp_dkn.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "75be4cfc-010d-4770-a6cf-ce8d24324070",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set lattice with focusing errors (no coupling)\n",
    "\n",
    "error:Line = ring.clone()\n",
    "\n",
    "nq = error.describe['Quadrupole']\n",
    "\n",
    "error_kn = 0.1*torch.randn(nq, dtype=torch.float64)\n",
    "\n",
    "index = 0\n",
    "label = ''\n",
    "\n",
    "for line in error.sequence:\n",
    "    for element in line:\n",
    "        if element.__class__.__name__ == 'Quadrupole':\n",
    "            if label != element.name:\n",
    "                index +=1\n",
    "            label = element.name\n",
    "            element.kn = (element.kn + error_kn[index - 1]).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cdfc0eaf-01ae-4461-9c32-c8e11babc763",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(1.3708, dtype=torch.float64)\n",
      "tensor(0.8085, dtype=torch.float64)\n",
      "tensor(0.5866, dtype=torch.float64)\n",
      "tensor(0.3774, dtype=torch.float64)\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute twiss and plot beta beating\n",
    "\n",
    "ax_model, bx_model, ay_model, by_model = twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_error, bx_error, ay_error, by_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "\n",
    "# Compare twiss\n",
    "\n",
    "print((ax_model - ax_error).norm())\n",
    "print((bx_model - bx_error).norm())\n",
    "print((ay_model - ay_error).norm())\n",
    "print((by_model - by_error).norm())\n",
    "print()\n",
    "\n",
    "# Plot beta beating\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_error)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_error)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='o')\n",
    "plt.xticks(ticks=positions, labels=['BPM05', 'BPM07', 'BPM08', 'BPM09', 'BPM10', 'BPM11', 'BPM12', 'BPM13', 'BPM14', 'BPM15', 'BPM16', 'BPM17', 'BPM01', 'BPM02', 'BPM03', 'BPM04'])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "77137cd1-1a6e-4334-ad4e-c5c8a0f39069",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(1.7376, dtype=torch.float64)\n",
      "tensor(0.2810, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "# Test Twiss response\n",
    "\n",
    "twiss_error = torch.stack([ax_error, bx_error, ay_error, by_error])\n",
    "twiss_model = torch.stack([ax_model, bx_model, ay_model, by_model])\n",
    "\n",
    "print((twiss_error - (twiss_model + 0.0*(dtwiss_dkn @ error_kn).T)).norm())\n",
    "print((twiss_error - (twiss_model + 1.0*(dtwiss_dkn @ error_kn).T)).norm())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f56fc0fa-2227-4222-9386-10106f9a367b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(1.7376, dtype=torch.float64)\n",
      "tensor(1.5638, dtype=torch.float64)\n",
      "tensor(1.4067, dtype=torch.float64)\n",
      "tensor(1.2649, dtype=torch.float64)\n",
      "tensor(1.1371, dtype=torch.float64)\n",
      "tensor(1.0220, dtype=torch.float64)\n",
      "tensor(0.9184, dtype=torch.float64)\n",
      "tensor(0.8252, dtype=torch.float64)\n",
      "tensor(0.7415, dtype=torch.float64)\n",
      "tensor(0.6663, dtype=torch.float64)\n",
      "tensor(0.5989, dtype=torch.float64)\n",
      "tensor(0.5384, dtype=torch.float64)\n",
      "tensor(0.4842, dtype=torch.float64)\n",
      "tensor(0.4357, dtype=torch.float64)\n",
      "tensor(0.3922, dtype=torch.float64)\n",
      "tensor(0.3533, dtype=torch.float64)\n",
      "tensor(0.3185, dtype=torch.float64)\n",
      "tensor(0.2873, dtype=torch.float64)\n",
      "tensor(0.2595, dtype=torch.float64)\n",
      "tensor(0.2345, dtype=torch.float64)\n",
      "tensor(0.2122, dtype=torch.float64)\n",
      "tensor(0.1922, dtype=torch.float64)\n",
      "tensor(0.1743, dtype=torch.float64)\n",
      "tensor(0.1583, dtype=torch.float64)\n",
      "tensor(0.1440, dtype=torch.float64)\n",
      "tensor(0.1311, dtype=torch.float64)\n",
      "tensor(0.1195, dtype=torch.float64)\n",
      "tensor(0.1091, dtype=torch.float64)\n",
      "tensor(0.0998, dtype=torch.float64)\n",
      "tensor(0.0914, dtype=torch.float64)\n",
      "tensor(0.0838, dtype=torch.float64)\n",
      "tensor(0.0770, dtype=torch.float64)\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Perform correction (model to experiment)\n",
    "\n",
    "# Set response matrix\n",
    "\n",
    "matrix = dtwiss_dkn.reshape(-1, nq)\n",
    "\n",
    "# Set target twiss parameters\n",
    "\n",
    "twiss_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "# Set learning rate\n",
    "\n",
    "lr = 0.1\n",
    "\n",
    "# Set initial values\n",
    "\n",
    "kn = torch.zeros_like(error_kn)\n",
    "\n",
    "# Fit\n",
    "\n",
    "for _ in range(32):\n",
    "    twiss_model = twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "    dkn = - lr*torch.linalg.lstsq(matrix, (twiss_model - twiss_error).flatten(), driver='gelsd').solution\n",
    "    kn += dkn\n",
    "    print((twiss_model - twiss_error).norm())\n",
    "\n",
    "# Plot final quadrupole settings\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.bar(range(len(error_kn)), error_kn.cpu().numpy(), color='red', alpha=0.75, width=1)\n",
    "plt.bar(range(len(kn)), +kn.cpu().numpy(), color='blue', alpha=0.75, width=0.75)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f0832cee-54f1-4365-a0a5-d97f7a4b7efe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply corrections\n",
    "\n",
    "lattice:Line = error.clone()\n",
    "\n",
    "index = 0\n",
    "label = ''\n",
    "\n",
    "for line in lattice.sequence:\n",
    "    for element in line:\n",
    "        if element.__class__.__name__ == 'Quadrupole':\n",
    "            if label != element.name:\n",
    "                index +=1\n",
    "            label = element.name\n",
    "            element.kn = (element.kn - kn[index - 1]).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ea12e689-2408-40c3-afe6-b59ddda48155",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute twiss and plot beta beating\n",
    "\n",
    "ax_model, bx_model, ay_model, by_model = twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_error, bx_error, ay_error, by_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_final, bx_final, ay_final, by_final = twiss(lattice, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "\n",
    "# Plot beta beating\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_error)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_error)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_final)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='x')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_final)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='x')\n",
    "plt.xticks(ticks=positions, labels=['BPM05', 'BPM07', 'BPM08', 'BPM09', 'BPM10', 'BPM11', 'BPM12', 'BPM13', 'BPM14', 'BPM15', 'BPM16', 'BPM17', 'BPM01', 'BPM02', 'BPM03', 'BPM04'])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c877b0c4-fe73-4e40-bff8-1f61f3f0e562",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(69.5123, dtype=torch.float64)\n",
      "tensor(5.5803, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "# Test Twiss response (chromatic)\n",
    "\n",
    "twiss_error = chromatic_twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "twiss_model = chromatic_twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "print((twiss_error - (twiss_model + 0.0*(dtwiss_dp_dkn @ error_kn))).norm())\n",
    "print((twiss_error - (twiss_model + 1.0*(dtwiss_dp_dkn @ error_kn))).norm())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "77135f2d-8032-482d-b562-281d0fcc83c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(69.5340, dtype=torch.float64)\n",
      "tensor(62.5709, dtype=torch.float64)\n",
      "tensor(56.2831, dtype=torch.float64)\n",
      "tensor(50.6092, dtype=torch.float64)\n",
      "tensor(45.4934, dtype=torch.float64)\n",
      "tensor(40.8845, dtype=torch.float64)\n",
      "tensor(36.7358, dtype=torch.float64)\n",
      "tensor(33.0042, dtype=torch.float64)\n",
      "tensor(29.6499, dtype=torch.float64)\n",
      "tensor(26.6367, dtype=torch.float64)\n",
      "tensor(23.9311, dtype=torch.float64)\n",
      "tensor(21.5026, dtype=torch.float64)\n",
      "tensor(19.3235, dtype=torch.float64)\n",
      "tensor(17.3686, dtype=torch.float64)\n",
      "tensor(15.6148, dtype=torch.float64)\n",
      "tensor(14.0417, dtype=torch.float64)\n",
      "tensor(12.6304, dtype=torch.float64)\n",
      "tensor(11.3641, dtype=torch.float64)\n",
      "tensor(10.2279, dtype=torch.float64)\n",
      "tensor(9.2081, dtype=torch.float64)\n",
      "tensor(8.2926, dtype=torch.float64)\n",
      "tensor(7.4706, dtype=torch.float64)\n",
      "tensor(6.7322, dtype=torch.float64)\n",
      "tensor(6.0687, dtype=torch.float64)\n",
      "tensor(5.4725, dtype=torch.float64)\n",
      "tensor(4.9364, dtype=torch.float64)\n",
      "tensor(4.4543, dtype=torch.float64)\n",
      "tensor(4.0206, dtype=torch.float64)\n",
      "tensor(3.6303, dtype=torch.float64)\n",
      "tensor(3.2790, dtype=torch.float64)\n",
      "tensor(2.9626, dtype=torch.float64)\n",
      "tensor(2.6776, dtype=torch.float64)\n",
      "tensor(2.4208, dtype=torch.float64)\n",
      "tensor(2.1893, dtype=torch.float64)\n",
      "tensor(1.9806, dtype=torch.float64)\n",
      "tensor(1.7924, dtype=torch.float64)\n",
      "tensor(1.6225, dtype=torch.float64)\n",
      "tensor(1.4692, dtype=torch.float64)\n",
      "tensor(1.3308, dtype=torch.float64)\n",
      "tensor(1.2059, dtype=torch.float64)\n",
      "tensor(1.0930, dtype=torch.float64)\n",
      "tensor(0.9909, dtype=torch.float64)\n",
      "tensor(0.8987, dtype=torch.float64)\n",
      "tensor(0.8153, dtype=torch.float64)\n",
      "tensor(0.7399, dtype=torch.float64)\n",
      "tensor(0.6717, dtype=torch.float64)\n",
      "tensor(0.6099, dtype=torch.float64)\n",
      "tensor(0.5540, dtype=torch.float64)\n",
      "tensor(0.5034, dtype=torch.float64)\n",
      "tensor(0.4575, dtype=torch.float64)\n",
      "tensor(0.4159, dtype=torch.float64)\n",
      "tensor(0.3783, dtype=torch.float64)\n",
      "tensor(0.3441, dtype=torch.float64)\n",
      "tensor(0.3131, dtype=torch.float64)\n",
      "tensor(0.2850, dtype=torch.float64)\n",
      "tensor(0.2595, dtype=torch.float64)\n",
      "tensor(0.2364, dtype=torch.float64)\n",
      "tensor(0.2154, dtype=torch.float64)\n",
      "tensor(0.1963, dtype=torch.float64)\n",
      "tensor(0.1789, dtype=torch.float64)\n",
      "tensor(0.1632, dtype=torch.float64)\n",
      "tensor(0.1489, dtype=torch.float64)\n",
      "tensor(0.1358, dtype=torch.float64)\n",
      "tensor(0.1240, dtype=torch.float64)\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Perform correction (model to experiment) including chromatic twiss\n",
    "\n",
    "# Set response matrix\n",
    "\n",
    "matrix = torch.vstack([dtwiss_dkn.reshape(-1, nq), dtwiss_dp_dkn.reshape(-1, nq)])\n",
    "\n",
    "# Set target twiss parameters\n",
    "\n",
    "twiss_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "chromatic_twiss_error = chromatic_twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "# Set learning rate\n",
    "\n",
    "lr = 0.1\n",
    "\n",
    "# Set initial values\n",
    "\n",
    "kn = torch.zeros_like(error_kn)\n",
    "\n",
    "# Fit\n",
    "\n",
    "for _ in range(64):\n",
    "    twiss_model = twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "    chromatic_twiss_model = chromatic_twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "    dkn = - lr*torch.linalg.lstsq(matrix, torch.stack([twiss_model - twiss_error, chromatic_twiss_model - chromatic_twiss_error]).flatten(), driver='gelsd').solution\n",
    "    kn += dkn\n",
    "    print(torch.stack([twiss_model - twiss_error, chromatic_twiss_model - chromatic_twiss_error]).norm())\n",
    "\n",
    "# Plot final quadrupole settings\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.bar(range(len(error_kn)), error_kn.cpu().numpy(), color='red', alpha=0.75, width=1)\n",
    "plt.bar(range(len(kn)), +kn.cpu().numpy(), color='blue', alpha=0.75, width=0.75)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "82db6fb5-20d7-4f69-a934-6e4d66e55172",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply corrections\n",
    "\n",
    "lattice:Line = error.clone()\n",
    "\n",
    "index = 0\n",
    "label = ''\n",
    "\n",
    "for line in lattice.sequence:\n",
    "    for element in line:\n",
    "        if element.__class__.__name__ == 'Quadrupole':\n",
    "            if label != element.name:\n",
    "                index +=1\n",
    "            label = element.name\n",
    "            element.kn = (element.kn - kn[index - 1]).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c498df81-f365-4830-9620-1cdb2bc89b75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute twiss and plot beta beating\n",
    "\n",
    "ax_model, bx_model, ay_model, by_model = twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_error, bx_error, ay_error, by_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_final, bx_final, ay_final, by_final = twiss(lattice, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "\n",
    "# Plot beta beating\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_error)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_error)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_final)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='x')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_final)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='x')\n",
    "plt.xticks(ticks=positions, labels=['BPM05', 'BPM07', 'BPM08', 'BPM09', 'BPM10', 'BPM11', 'BPM12', 'BPM13', 'BPM14', 'BPM15', 'BPM16', 'BPM17', 'BPM01', 'BPM02', 'BPM03', 'BPM04'])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7327d250-aac9-4872-8645-3b094cda26a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(1.7376, dtype=torch.float64)\n",
      "tensor(0., dtype=torch.float64)\n",
      "\n",
      "tensor(1.7376, dtype=torch.float64)\n",
      "tensor(4.8796e-13, dtype=torch.float64)\n",
      "\n",
      "tensor(1.7376, dtype=torch.float64)\n",
      "tensor(1.5623, dtype=torch.float64)\n",
      "tensor(1.4006, dtype=torch.float64)\n",
      "tensor(1.2536, dtype=torch.float64)\n",
      "tensor(1.1222, dtype=torch.float64)\n",
      "tensor(1.0066, dtype=torch.float64)\n",
      "tensor(0.9054, dtype=torch.float64)\n",
      "tensor(0.8187, dtype=torch.float64)\n",
      "tensor(0.7487, dtype=torch.float64)\n",
      "tensor(0.6968, dtype=torch.float64)\n",
      "tensor(0.6613, dtype=torch.float64)\n",
      "tensor(0.6364, dtype=torch.float64)\n",
      "tensor(0.6152, dtype=torch.float64)\n",
      "tensor(0.5918, dtype=torch.float64)\n",
      "tensor(0.5634, dtype=torch.float64)\n",
      "tensor(0.5298, dtype=torch.float64)\n",
      "tensor(0.4917, dtype=torch.float64)\n",
      "tensor(0.4498, dtype=torch.float64)\n",
      "tensor(0.4053, dtype=torch.float64)\n",
      "tensor(0.3615, dtype=torch.float64)\n",
      "tensor(0.3244, dtype=torch.float64)\n",
      "tensor(0.2996, dtype=torch.float64)\n",
      "tensor(0.2876, dtype=torch.float64)\n",
      "tensor(0.2831, dtype=torch.float64)\n",
      "tensor(0.2812, dtype=torch.float64)\n",
      "tensor(0.2804, dtype=torch.float64)\n",
      "tensor(0.2789, dtype=torch.float64)\n",
      "tensor(0.2738, dtype=torch.float64)\n",
      "tensor(0.2647, dtype=torch.float64)\n",
      "tensor(0.2542, dtype=torch.float64)\n",
      "tensor(0.2450, dtype=torch.float64)\n",
      "tensor(0.2369, dtype=torch.float64)\n",
      "tensor(0.2295, dtype=torch.float64)\n",
      "tensor(0.2242, dtype=torch.float64)\n",
      "tensor(0.2220, dtype=torch.float64)\n",
      "tensor(0.2203, dtype=torch.float64)\n",
      "tensor(0.2160, dtype=torch.float64)\n",
      "tensor(0.2092, dtype=torch.float64)\n",
      "tensor(0.2011, dtype=torch.float64)\n",
      "tensor(0.1925, dtype=torch.float64)\n",
      "tensor(0.1854, dtype=torch.float64)\n",
      "tensor(0.1817, dtype=torch.float64)\n",
      "tensor(0.1799, dtype=torch.float64)\n",
      "tensor(0.1769, dtype=torch.float64)\n",
      "tensor(0.1718, dtype=torch.float64)\n",
      "tensor(0.1649, dtype=torch.float64)\n",
      "tensor(0.1571, dtype=torch.float64)\n",
      "tensor(0.1504, dtype=torch.float64)\n",
      "tensor(0.1459, dtype=torch.float64)\n",
      "tensor(0.1423, dtype=torch.float64)\n",
      "tensor(0.1390, dtype=torch.float64)\n",
      "tensor(0.1354, dtype=torch.float64)\n",
      "tensor(0.1310, dtype=torch.float64)\n",
      "tensor(0.1267, dtype=torch.float64)\n",
      "tensor(0.1231, dtype=torch.float64)\n",
      "tensor(0.1199, dtype=torch.float64)\n",
      "tensor(0.1169, dtype=torch.float64)\n",
      "tensor(0.1127, dtype=torch.float64)\n",
      "tensor(0.1073, dtype=torch.float64)\n",
      "tensor(0.1017, dtype=torch.float64)\n",
      "tensor(0.0971, dtype=torch.float64)\n",
      "tensor(0.0936, dtype=torch.float64)\n",
      "tensor(0.0902, dtype=torch.float64)\n",
      "tensor(0.0865, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "# ML style correction (model to experiment)\n",
    "\n",
    "# Set target twiss parameters\n",
    "\n",
    "twiss_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "# Set learning rate\n",
    "\n",
    "lr = 0.005\n",
    "\n",
    "# Set parametric twiss\n",
    "\n",
    "def twiss_model(kn):\n",
    "    return twiss(ring, [kn], ('kn', ['Quadrupole'], None, None), alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "# Set objective function\n",
    "\n",
    "def objective(kn):\n",
    "    return (twiss_error - twiss_model(kn)).norm()\n",
    "\n",
    "# Set initial values\n",
    "\n",
    "kn = torch.zeros_like(error_kn)\n",
    "\n",
    "# Test objective function\n",
    "\n",
    "print(objective(0.0*error_kn))\n",
    "print(objective(1.0*error_kn))\n",
    "print()\n",
    "\n",
    "# Set normalized objective\n",
    "\n",
    "objective = normalize(objective, [(-0.5, 0.5)])\n",
    "\n",
    "# Test normalized objective\n",
    "\n",
    "print(objective(*forward([0.0*error_kn], [(-0.5, 0.5)])))\n",
    "print(objective(*forward([1.0*error_kn], [(-0.5, 0.5)])))\n",
    "print()\n",
    "\n",
    "# Normalize initial settings\n",
    "\n",
    "kn, *_ = forward([kn], [(-0.5, 0.5)])\n",
    "\n",
    "# Set model (forward returns evaluated objective)\n",
    "\n",
    "model = Wrapper(objective, kn)\n",
    "\n",
    "# Set optimizer\n",
    "\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n",
    "\n",
    "# Perform optimization\n",
    "\n",
    "for epoch in range(64):\n",
    "    value = model()\n",
    "    value.backward()\n",
    "    optimizer.step()\n",
    "    optimizer.zero_grad()\n",
    "    print(value.detach())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b9c45388-8774-4d59-bb8d-2695dc1d1afb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply corrections\n",
    "\n",
    "kn, *_ = inverse([kn], [(-0.5, 0.5)])\n",
    "\n",
    "lattice:Line = error.clone()\n",
    "\n",
    "index = 0\n",
    "label = ''\n",
    "\n",
    "for line in lattice.sequence:\n",
    "    for element in line:\n",
    "        if element.__class__.__name__ == 'Quadrupole':\n",
    "            if label != element.name:\n",
    "                index +=1\n",
    "            label = element.name\n",
    "            element.kn = (element.kn - kn[index - 1]).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ebefada3-eea3-4cdb-8278-94b6a10339d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABjUAAAC+CAYAAAB9JI0oAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAACalElEQVR4nO3deZwT5f0H8M8k2Ztd9uA+RBYQPBAE1ApSTzyqra0V9eexSluhtda2XojW+0Dw1tYK2qKrtlbUHtoqp1gOrcqpKAgsIsvNntkr2STz++Ozs0n2XtjdTJLP+/WaVzJJdnc2k8w883yf7/cxTNM0ISIiIiIiIiIiIiIiYnOOSG+AiIiIiIiIiIiIiIhIWyioISIiIiIiIiIiIiIiUUFBDRERERERERERERERiQoKaoiIiIiIiIiIiIiISFRQUENERERERERERERERKKCghoiIiIiIiIiIiIiIhIVFNQQEREREREREREREZGooKCGiIiIiIiIiIiIiIhEBVekN6A9AoEAdu/ejfT0dBiGEenNERERERERERERERGRDmCaJtxuN/r16weHo/l8jKgKauzevRsDBw6M9GaIiIiIiIiIiIiIiEgn2LlzJwYMGNDs81EV1EhPTwfAfyojIyPCWyMiIiIiIiIiIiIiIh2hvLwcAwcOrI8DNCeqghpWyamMjAwFNUREREREREREREQkugQCwIYNQFERkJMDHH880EKppXjU2tQTURXUEBERERERERERERGJSsuXA48/DmzaBHg8QFISMGIEcPPNwMSJkd66qKEQkIiIiIiIiIiIiIhIZ1q+HPjVr4B164CMDGDgQN6uX8/Hly+P9BZGDQU1REREREREREREREQ6SyDADI3SUuDII4GEBKC4GEhLAwYNAsrKgCee4OukVQpqiIiIiIiIiIiIiIh0lg0bWHKqVy8GMzZtAnbtYjDDMICePYGvvuLrpFWaU0NEREREREREREREpLMUFQHV1UBFBVBZycfS0oDkZN5PTgYOHuTrpFUKaoiIiIiIiIiIiIiIdAbTZBZGURHgcAAuF9CvH7MzLDU1QGIikJMTue2MIgpqiIiIiIiIiIiIiIh0tIMHgcceAz7+mNkYXi8wfHgwQwNg0OPAAWD0aOD44yO2qdFEc2qIiIiIiIiIiIiIiHQU0wQWLACuvRb43/+YhXHDDcDgwcDevSxB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",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute twiss and plot beta beating\n",
    "\n",
    "ax_model, bx_model, ay_model, by_model = twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_error, bx_error, ay_error, by_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_final, bx_final, ay_final, by_final = twiss(lattice, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "\n",
    "# Plot beta beating\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_error)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_error)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_final)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='x')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_final)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='x')\n",
    "plt.xticks(ticks=positions, labels=['BPM05', 'BPM07', 'BPM08', 'BPM09', 'BPM10', 'BPM11', 'BPM12', 'BPM13', 'BPM14', 'BPM15', 'BPM16', 'BPM17', 'BPM01', 'BPM02', 'BPM03', 'BPM04'])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ff578ab4-cbbc-4e66-b624-6f58b906855d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# AdEMAMix optimizer\n",
    "\n",
    "# https://arxiv.org/abs/2409.03137\n",
    "# https://github.com/apple/ml-ademamix\n",
    "\n",
    "import math\n",
    "import torch\n",
    "from torch.optim import Optimizer\n",
    "\n",
    "\n",
    "def linear_warmup_scheduler(step, alpha_end, alpha_start=0, warmup=1):\n",
    "    if step < warmup:\n",
    "        a = step / float(warmup)\n",
    "        return (1.0-a) * alpha_start + a * alpha_end\n",
    "    return alpha_end\n",
    "\n",
    "\n",
    "def linear_hl_warmup_scheduler(step, beta_end, beta_start=0, warmup=1):\n",
    "    def f(beta, eps=1e-8):\n",
    "        return math.log(0.5)/math.log(beta+eps)-1\n",
    "    def f_inv(t):\n",
    "        return math.pow(0.5, 1/(t+1))\n",
    "    if step < warmup:\n",
    "        a = step / float(warmup)\n",
    "        return f_inv((1.0-a) * f(beta_start) + a * f(beta_end))\n",
    "    return beta_end\n",
    "\n",
    "\n",
    "class AdEMAMix(Optimizer):\n",
    "    \"\"\"Implements the AdEMAMix algorithm.\n",
    "\n",
    "    Arguments:\n",
    "        params (iterable): iterable of parameters to optimize or dicts defining\n",
    "            parameter groups\n",
    "        lr (float, optional): learning rate (default: 1e-3)\n",
    "        betas (Tuple[float, float, float], optional): coefficients used for computing\n",
    "            running averages of gradient and its square (default: (0.9, 0.999, 0.9999)) \n",
    "            corresponding to beta_1, beta_2, beta_3 in AdEMAMix\n",
    "        alpha (float): AdEMAMix alpha coeficient mixing the slow and fast EMAs (default: 2)\n",
    "        beta3_warmup (int, optional): number of warmup steps used to increase beta3 (default: None)\n",
    "        alpha_warmup: (int, optional): number of warmup steps used to increase alpha (default: None)\n",
    "        eps (float, optional): term added to the denominator to improve\n",
    "            numerical stability (default: 1e-8)\n",
    "        weight_decay (float, optional): weight decay as in AdamW (default: 0)\n",
    "    \"\"\"\n",
    "    def __init__(self, \n",
    "                 params, \n",
    "                 lr=1e-3, \n",
    "                 betas=(0.9, 0.999, 0.9999), \n",
    "                 alpha=2.0, \n",
    "                 beta3_warmup=None, \n",
    "                 alpha_warmup=None,  \n",
    "                 eps=1e-8,\n",
    "                 weight_decay=0):\n",
    "        \n",
    "        defaults = dict(lr=lr, \n",
    "                        betas=betas, \n",
    "                        eps=eps, \n",
    "                        alpha=alpha, \n",
    "                        beta3_warmup=beta3_warmup,\n",
    "                        alpha_warmup=alpha_warmup, \n",
    "                        weight_decay=weight_decay)\n",
    "        \n",
    "        super().__init__(params, defaults)\n",
    "\n",
    "    def __setstate__(self, state):\n",
    "        super().__setstate__(state)\n",
    "\n",
    "    @torch.no_grad()\n",
    "    def step(self, closure=None):\n",
    "        \"\"\"Performs a single optimization step.\n",
    "\n",
    "        Arguments:\n",
    "            closure (callable, optional): A closure that reevaluates the model\n",
    "                and returns the loss.\n",
    "        \"\"\"\n",
    "        loss = None\n",
    "        if closure is not None:\n",
    "            with torch.enable_grad():\n",
    "                loss = closure()\n",
    "\n",
    "        for group in self.param_groups:\n",
    "            \n",
    "            lr = group[\"lr\"]\n",
    "            lmbda = group[\"weight_decay\"]\n",
    "            eps = group[\"eps\"]\n",
    "            beta1, beta2, beta3_final = group[\"betas\"]\n",
    "            beta3_warmup = group[\"beta3_warmup\"]\n",
    "            alpha_final = group[\"alpha\"]\n",
    "            alpha_warmup = group[\"alpha_warmup\"]\n",
    "        \n",
    "            for p in group['params']:\n",
    "                if p.grad is None:\n",
    "                    continue\n",
    "                grad = p.grad\n",
    "                if grad.is_sparse:\n",
    "                    raise RuntimeError('AdEMAMix does not support sparse gradients.')\n",
    "\n",
    "                state = self.state[p]\n",
    "\n",
    "\n",
    "                if len(state) == 0:\n",
    "                    state['step'] = 0\n",
    "                    if beta1 != 0.0:\n",
    "                        state['exp_avg_fast'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n",
    "                    else: \n",
    "                        state['exp_avg_fast'] = None\n",
    "                    state['exp_avg_slow'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n",
    "                    state['exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n",
    "\n",
    "                exp_avg_fast, exp_avg_slow, exp_avg_sq = state['exp_avg_fast'], state['exp_avg_slow'], state['exp_avg_sq']\n",
    "\n",
    "                state['step'] += 1\n",
    "                bias_correction1 = 1 - beta1 ** state['step']\n",
    "                bias_correction2 = 1 - beta2 ** state['step']\n",
    "\n",
    "                if alpha_warmup is not None:\n",
    "                    alpha = linear_warmup_scheduler(state[\"step\"], alpha_end=alpha_final, alpha_start=0, warmup=alpha_warmup)\n",
    "                else:\n",
    "                    alpha = alpha_final\n",
    "                \n",
    "                if beta3_warmup is not None:\n",
    "                    beta3 = linear_hl_warmup_scheduler(state[\"step\"], beta_end=beta3_final, beta_start=beta1, warmup=beta3_warmup)\n",
    "                else:\n",
    "                    beta3 = beta3_final\n",
    "\n",
    "                if beta1 != 0.0:\n",
    "                    exp_avg_fast.mul_(beta1).add_(grad, alpha=1 - beta1)\n",
    "                else:\n",
    "                    exp_avg_fast = grad\n",
    "                exp_avg_slow.mul_(beta3).add_(grad, alpha=1 - beta3)\n",
    "                exp_avg_sq.mul_(beta2).addcmul_(grad, grad, value=1 - beta2)\n",
    "\n",
    "                denom = (exp_avg_sq.sqrt() / math.sqrt(bias_correction2)).add_(eps)\n",
    "\n",
    "                update = (exp_avg_fast.div(bias_correction1) + alpha * exp_avg_slow) / denom\n",
    "\n",
    "                update.add_(p, alpha=lmbda)\n",
    "\n",
    "                p.add_(-lr * update)\n",
    "\n",
    "        return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e866fea2-f0c2-4068-8527-c4ace2afa8bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.0472, dtype=torch.float64)\n",
      "tensor(0.0381, dtype=torch.float64)\n",
      "tensor(0.0307, dtype=torch.float64)\n",
      "tensor(0.0247, dtype=torch.float64)\n",
      "tensor(0.0199, dtype=torch.float64)\n",
      "tensor(0.0161, dtype=torch.float64)\n",
      "tensor(0.0133, dtype=torch.float64)\n",
      "tensor(0.0111, dtype=torch.float64)\n",
      "tensor(0.0094, dtype=torch.float64)\n",
      "tensor(0.0082, dtype=torch.float64)\n",
      "tensor(0.0075, dtype=torch.float64)\n",
      "tensor(0.0069, dtype=torch.float64)\n",
      "tensor(0.0066, dtype=torch.float64)\n",
      "tensor(0.0063, dtype=torch.float64)\n",
      "tensor(0.0060, dtype=torch.float64)\n",
      "tensor(0.0057, dtype=torch.float64)\n",
      "tensor(0.0053, dtype=torch.float64)\n",
      "tensor(0.0049, dtype=torch.float64)\n",
      "tensor(0.0045, dtype=torch.float64)\n",
      "tensor(0.0040, dtype=torch.float64)\n",
      "tensor(0.0035, dtype=torch.float64)\n",
      "tensor(0.0031, dtype=torch.float64)\n",
      "tensor(0.0027, dtype=torch.float64)\n",
      "tensor(0.0023, dtype=torch.float64)\n",
      "tensor(0.0020, dtype=torch.float64)\n",
      "tensor(0.0018, dtype=torch.float64)\n",
      "tensor(0.0016, dtype=torch.float64)\n",
      "tensor(0.0015, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0014, dtype=torch.float64)\n",
      "tensor(0.0013, dtype=torch.float64)\n",
      "tensor(0.0013, dtype=torch.float64)\n",
      "tensor(0.0012, dtype=torch.float64)\n",
      "tensor(0.0012, dtype=torch.float64)\n",
      "tensor(0.0011, dtype=torch.float64)\n",
      "tensor(0.0010, dtype=torch.float64)\n",
      "tensor(0.0009, dtype=torch.float64)\n",
      "tensor(0.0009, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0008, dtype=torch.float64)\n",
      "tensor(0.0007, dtype=torch.float64)\n",
      "tensor(0.0007, dtype=torch.float64)\n",
      "tensor(0.0007, dtype=torch.float64)\n",
      "tensor(0.0007, dtype=torch.float64)\n",
      "tensor(0.0007, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n",
      "tensor(0.0006, dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "# ML style correction (batched)\n",
    "\n",
    "# Set target twiss parameters\n",
    "\n",
    "twiss_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True)\n",
    "\n",
    "# Set learning rate\n",
    "\n",
    "lr = 0.005\n",
    "\n",
    "# Define rings (Twiss parameters will be computed at each ring start)\n",
    "\n",
    "rings:list[Line] = []\n",
    "\n",
    "for i, _ in enumerate(ring):\n",
    "    line = ring.clone()\n",
    "    line.roll(i)\n",
    "    rings.append(line)\n",
    "\n",
    "# Set batched function\n",
    "\n",
    "_, ((_, names, _), *_), _ = group(ring, 0, len(ring) - 1, ('kn', ['Quadrupole'], None, None))\n",
    "\n",
    "def task(Is, kn):\n",
    "    result = []\n",
    "    for I in Is:\n",
    "        result.append(twiss(rings[I], [kn], ('kn', None, names, None), alignment=False, matched=True, convert=True))\n",
    "    return torch.stack(result)\n",
    "\n",
    "# Set initial values\n",
    "\n",
    "kn = torch.zeros_like(error_kn)\n",
    "\n",
    "# Normalize objective\n",
    "\n",
    "task = normalize(task, [(None, None), (-0.5, 0.5)])\n",
    "\n",
    "# Normalize initial settings\n",
    "\n",
    "kn, *_ = forward([kn], [(-0.5, 0.5)])\n",
    "\n",
    "# Set model\n",
    "\n",
    "model = Wrapper(task, kn)\n",
    "\n",
    "# Set optimizer\n",
    "\n",
    "optimizer = AdEMAMix(model.parameters(), lr=lr)\n",
    "\n",
    "# Set features and labels \n",
    "\n",
    "X = torch.arange(len(ring))\n",
    "y = twiss_error.clone()\n",
    "\n",
    "# Set dataset\n",
    "# Note, full set is used here, batch size is too small otherwise\n",
    "\n",
    "batch_size = 16\n",
    "dataset = TensorDataset(X.clone(), y.clone())\n",
    "dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n",
    "\n",
    "# Set loss funtion\n",
    "\n",
    "lf = torch.nn.MSELoss()\n",
    "\n",
    "# Perfom optimization\n",
    "\n",
    "for epoch in range(64):\n",
    "    for batch, (X, y) in enumerate(dataloader):\n",
    "        y_hat = model(X)\n",
    "        value = lf(y_hat, y)\n",
    "        value.backward()\n",
    "        optimizer.step()\n",
    "        optimizer.zero_grad()\n",
    "    with torch.no_grad():\n",
    "        print(value.detach())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1dcfc6d7-13fa-43fd-b632-ce7f26e4d287",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply corrections\n",
    "\n",
    "kn, *_ = inverse([kn], [(-0.5, 0.5)])\n",
    "\n",
    "lattice:Line = error.clone()\n",
    "\n",
    "index = 0\n",
    "label = ''\n",
    "\n",
    "for line in lattice.sequence:\n",
    "    for element in line:\n",
    "        if element.__class__.__name__ == 'Quadrupole':\n",
    "            if label != element.name:\n",
    "                index +=1\n",
    "            label = element.name\n",
    "            element.kn = (element.kn - kn[index - 1]).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "61c51458-3e83-42d7-95fb-c5b8ae3ad7f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute twiss and plot beta beating\n",
    "\n",
    "ax_model, bx_model, ay_model, by_model = twiss(ring, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_error, bx_error, ay_error, by_error = twiss(error, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "ax_final, bx_final, ay_final, by_final = twiss(lattice, [], alignment=False, matched=True, advance=True, full=False, convert=True).T\n",
    "\n",
    "# Plot beta beating\n",
    "\n",
    "plt.figure(figsize=(16, 2))\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_error)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_error)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='o')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((bx_model - bx_final)/bx_model).cpu().numpy(), color='red', alpha=0.75, marker='x')\n",
    "plt.plot(ring.locations().cpu().numpy(), 100*((by_model - by_final)/by_model).cpu().numpy(), color='blue', alpha=0.75, marker='x')\n",
    "plt.xticks(ticks=positions, labels=['BPM05', 'BPM07', 'BPM08', 'BPM09', 'BPM10', 'BPM11', 'BPM12', 'BPM13', 'BPM14', 'BPM15', 'BPM16', 'BPM17', 'BPM01', 'BPM02', 'BPM03', 'BPM04'])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
