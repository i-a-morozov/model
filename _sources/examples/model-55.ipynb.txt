{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "262a5ec8-2553-4237-ab62-319b6ca22089",
   "metadata": {},
   "source": [
    "# Example-56: Trajectory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "601c2f09-bb6b-4819-97a4-445960bfb5f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this example usage of differentiable trajectory generators is illustrated\n",
    "# This generators can be defined to genetate parametic trajectories at one or several observation locations\n",
    "# Given initial condition, number of iterations and deviation variables, generators return corresponding orbit data \n",
    "# Generators are differentiable with respect to initial conditions and parametes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee722d5c-889a-4d7b-91b6-d8da0de8771b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import\n",
    "\n",
    "import torch\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from model.library.line import Line\n",
    "from model.library.corrector import Corrector\n",
    "\n",
    "from model.command.external import load_lattice\n",
    "from model.command.build import build\n",
    "from model.command.wrapper import group\n",
    "from model.command.orbit import orbit\n",
    "from model.command.tune import tune\n",
    "from model.command.mapping import mapping\n",
    "from model.command.trajectory import trajectory\n",
    "\n",
    "torch.set_printoptions(linewidth=128)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2f8dd87b-bbe6-418d-ae3e-8d58397d05ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build and setup lattice\n",
    "\n",
    "# Load ELEGANT table\n",
    "\n",
    "path = Path('ic.lte')\n",
    "data = load_lattice(path)\n",
    "\n",
    "# Build ELEGANT table\n",
    "\n",
    "ring:Line = build('RING', 'ELEGANT', data)\n",
    "ring.flatten()\n",
    "\n",
    "# Merge drifts\n",
    "\n",
    "ring.merge()\n",
    "\n",
    "# Turn off sextupoles and set linear dipoles\n",
    "\n",
    "for element in ring: \n",
    "    if element.__class__.__name__ == 'Sextupole':\n",
    "        element.ms = 0.0\n",
    "    if element.__class__.__name__ == 'Dipole':\n",
    "        element.linear = True     \n",
    "\n",
    "# Add corrector\n",
    "\n",
    "corrector = Corrector('CXY')\n",
    "ring.append(corrector)\n",
    "\n",
    "# Split BPMs\n",
    "\n",
    "ring.split((None, ['BPM'], None, None))\n",
    "\n",
    "# Roll lattice start\n",
    "\n",
    "ring.roll(1)\n",
    "\n",
    "# Split lattice into lines by BPMs\n",
    "\n",
    "ring.splice()\n",
    "\n",
    "# Set number of elements of different kinds\n",
    "\n",
    "nb = ring.describe['BPM']\n",
    "nq = ring.describe['Quadrupole']\n",
    "ns = ring.describe['Sextupole']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "45371696-f7ab-4826-9d52-b8868bdf84fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 0.0010, -0.0001, -0.0010,  0.0001],\n",
      "        [-0.0042,  0.0085, -0.0041, -0.0059]], dtype=torch.float64)\n",
      "\n",
      "tensor([[ 0.0010, -0.0001, -0.0010,  0.0001],\n",
      "        [-0.0042,  0.0085, -0.0041, -0.0059]], dtype=torch.float64)\n",
      "\n",
      "tensor([[ 0.0010, -0.0001, -0.0010,  0.0001],\n",
      "        [-0.0042,  0.0085, -0.0041, -0.0059]], dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# One turn map transport\n",
    "\n",
    "corrector.cx = 0.0\n",
    "corrector.cy = 0.0\n",
    "\n",
    "state = torch.tensor([+1.0E-3, -1.0E-4, -1.0E-3, +1.0E-4], dtype=torch.float64)\n",
    "\n",
    "# Direct line tracking\n",
    "\n",
    "print(torch.stack([state, ring(state)]))\n",
    "print()\n",
    "\n",
    "# Mapping wrapper\n",
    "\n",
    "probe = 0\n",
    "other = len(ring) - 1\n",
    "transformation, *_ = mapping(ring, probe, other, matched=False)\n",
    "print(torch.stack([state, transformation(state)]))\n",
    "print()\n",
    "\n",
    "# Trajectory generator\n",
    "\n",
    "transformation = trajectory(ring, [probe],  matched=False)\n",
    "print(transformation(1, state))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11a49c92-aa55-439f-b250-c987fe547288",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# One turn map transport (closed orbit)\n",
    "\n",
    "corrector.cx = +100.0E-6\n",
    "corrector.cy = -100.0E-6\n",
    "\n",
    "# Compute closed orbit\n",
    "\n",
    "guess = torch.tensor([0.0, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "guess, *_ = orbit(ring, guess, [], limit=32, epsilon=1.0E-12, full=False)\n",
    "\n",
    "# Initial state around closed orbit\n",
    "\n",
    "state = torch.tensor([1.0E-3, 0.0, -1.0E-3, 0.0], dtype=torch.float64)\n",
    "\n",
    "# Direct line tracking\n",
    "\n",
    "print(torch.stack([state, ring(state + guess) - guess]))\n",
    "print()\n",
    "\n",
    "# Mapping wrapper (matched)\n",
    "# Note, mapping can be used to generate trajectory at a given location\n",
    "# But, for matched case, closed orbit will be computed on each invocation\n",
    "\n",
    "probe = 0\n",
    "other = len(ring) - 1\n",
    "transformation, *_ = mapping(ring, probe, other, matched=True, guess=guess, limit=32, epsilon=1.0E-12)\n",
    "print(torch.stack([state, transformation(state)]))\n",
    "print()\n",
    "\n",
    "# Trajectory generator (matched)\n",
    "\n",
    "transformation = trajectory(ring, [probe],  matched=True, guess=guess, limit=32, epsilon=1.0E-12)\n",
    "print(transformation(1, state))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2809c1b4-109e-4e2d-9581-10266f12cb17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0038, -0.0054]], dtype=torch.float64)\n",
      "\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [-0.0045,  0.0090, -0.0038, -0.0054]], dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# One turn map transport (closed orbit, parametric)\n",
    "\n",
    "corrector.cx = +100.0E-6\n",
    "corrector.cy = -100.0E-6\n",
    "\n",
    "# Compute closed orbit\n",
    "\n",
    "guess = torch.tensor([0.0, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "guess, *_ = orbit(ring, guess, [], limit=32, epsilon=1.0E-12, full=False)\n",
    "\n",
    "# Initial state around closed orbit\n",
    "\n",
    "state = torch.tensor([1.0E-3, 0.0, -1.0E-3, 0.0], dtype=torch.float64)\n",
    "\n",
    "# Set random deviations parameters\n",
    "\n",
    "kn = 0.01*torch.randn(nq, dtype=torch.float64)\n",
    "ks = 0.01*torch.randn(nq, dtype=torch.float64)\n",
    "\n",
    "# Mapping wrapper (matched, parametric)\n",
    "\n",
    "probe = 0\n",
    "other = len(ring) - 1\n",
    "transformation, *_ = mapping(ring, probe, other, ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=True, guess=guess, limit=32, epsilon=1.0E-12)\n",
    "print(torch.stack([state, transformation(state, 0*kn, 0*ks)]))\n",
    "print(torch.stack([state, transformation(state, 1*kn, 1*ks)]))\n",
    "print()\n",
    "\n",
    "# Trajectory generator (matched, parametric)\n",
    "\n",
    "transformation = trajectory(ring, [probe],  ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=True, guess=guess, limit=32, epsilon=1.0E-12)\n",
    "print(transformation(1, state, 0.0*kn, 0.0*ks))\n",
    "print(transformation(1, state, 1.0*kn, 1.0*ks))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "314838a2-1b2d-4213-8b54-65bc0c57046e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [ 0.0034, -0.0066,  0.0020,  0.0045],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [ 0.0034, -0.0066,  0.0020,  0.0045],\n",
      "        [-0.0044,  0.0088, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [ 0.0034, -0.0066,  0.0020,  0.0045],\n",
      "        [-0.0045,  0.0090, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "tensor([[ 0.0010,  0.0000, -0.0010,  0.0000],\n",
      "        [ 0.0034, -0.0066,  0.0020,  0.0045],\n",
      "        [-0.0044,  0.0088, -0.0039, -0.0056]], dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Several observation locations (closed orbit, parametric)\n",
    "\n",
    "corrector.cx = +100.0E-6\n",
    "corrector.cy = -100.0E-6\n",
    "\n",
    "# Initial state around closed orbit\n",
    "\n",
    "state = torch.tensor([1.0E-3, 0.0, -1.0E-3, 0.0], dtype=torch.float64)\n",
    "\n",
    "# Set random deviations parameters\n",
    "\n",
    "kn = 0.01*torch.randn(nq, dtype=torch.float64)\n",
    "ks = 0.01*torch.randn(nq, dtype=torch.float64)\n",
    "\n",
    "# Mapping wrapper for one turn (matched, parametric)\n",
    "\n",
    "t1, *_ = mapping(ring, 0, 0, ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=False, limit=32, epsilon=1.0E-12)\n",
    "t2, *_ = mapping(ring, 1, len(ring) - 1, ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=True, limit=32, epsilon=1.0E-12)\n",
    "\n",
    "print(torch.stack([state, local := t1(state, 0*kn, 0*ks), t2(local, 0*kn, 0*ks)]))\n",
    "print(torch.stack([state, local := t1(state, 1*kn, 1*ks), t2(local, 1*kn, 1*ks)]))\n",
    "print()\n",
    "\n",
    "# Trajectory generator (matched, parametric)\n",
    "\n",
    "transformation = trajectory(ring, [0, 1],  ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=True, limit=32, epsilon=1.0E-12)\n",
    "\n",
    "print(transformation(1, state, 0.0*kn, 0.0*ks))\n",
    "print(transformation(1, state, 1.0*kn, 1.0*ks))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9c3a8d28-5261-4fb8-acb1-4024b58e9d42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Multi-turn trajectory generator (single location)\n",
    "\n",
    "corrector.cx = 0.0\n",
    "corrector.cy = 0.0\n",
    "\n",
    "transformation = trajectory(ring, [0])\n",
    "\n",
    "state = torch.tensor([1.0E-3, 0.0, -1.0E-3, 0.0], dtype=torch.float64)\n",
    "qx, px, qy, py = transformation(2**10, state).T\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.errorbar(qx, px, color='red', fmt=' ', marker='x', ms=1)\n",
    "plt.errorbar(qy, py, color='blue', fmt=' ', marker='x', ms=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c1428093-b298-41eb-b8c8-bc96163baf8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2048, 4])\n",
      "torch.Size([2, 1024, 4])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Multi-turn trajectory generator (several locations)\n",
    "\n",
    "corrector.cx = 0.0\n",
    "corrector.cy = 0.0\n",
    "\n",
    "# Set list of observation locations and trajectory generator\n",
    "\n",
    "locations = [0, 1]\n",
    "transformation = trajectory(ring, locations)\n",
    "\n",
    "# Define initial state\n",
    "\n",
    "state = torch.tensor([1.0E-3, 0.0, -1.0E-3, 0.0], dtype=torch.float64)\n",
    "\n",
    "# Generate orbit and drop the last value\n",
    "\n",
    "*out, _ = transformation(2**10, state)\n",
    "out = torch.stack(out)\n",
    "print(out.shape)\n",
    "\n",
    "# Group by observation point\n",
    "\n",
    "out = out.reshape(-1, len(locations), 4).swapaxes(0, 1)\n",
    "print(out.shape)\n",
    "\n",
    "# Plot trajectory at the second observation location\n",
    "\n",
    "_, out = out\n",
    "qx, px, qy, py = out.T\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.errorbar(qx, px, color='red', fmt=' ', marker='x', ms=1)\n",
    "plt.errorbar(qy, py, color='blue', fmt=' ', marker='x', ms=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0689a09c-4695-4c38-ae33-38df574ba07c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0.]], dtype=torch.float64)\n",
      "\n",
      "tensor([[[ 1.0000,  0.0000,  0.0000,  0.0000],\n",
      "         [ 0.0000,  1.0000,  0.0000,  0.0000],\n",
      "         [ 0.0000,  0.0000,  1.0000,  0.0000],\n",
      "         [ 0.0000,  0.0000,  0.0000,  1.0000]],\n",
      "\n",
      "        [[ 3.3740,  2.1497,  0.0000,  0.0000],\n",
      "         [-6.6355, -3.9313,  0.0000,  0.0000],\n",
      "         [ 0.0000,  0.0000, -1.9826,  1.4845],\n",
      "         [ 0.0000,  0.0000, -4.5279,  2.8859]],\n",
      "\n",
      "        [[-4.4769, -2.6375,  0.0000,  0.0000],\n",
      "         [ 8.9592,  5.0549,  0.0000,  0.0000],\n",
      "         [ 0.0000,  0.0000,  3.9054, -2.0383],\n",
      "         [ 0.0000,  0.0000,  5.5965, -2.6648]]], dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Compute derivative with respect to initial condition\n",
    "\n",
    "corrector.cx = +100.0E-6\n",
    "corrector.cy = -100.0E-6\n",
    "\n",
    "# Generate transformation\n",
    "\n",
    "locations = [0, 1]\n",
    "transformation = trajectory(ring, locations,  ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=True, limit=32, epsilon=1.0E-12)\n",
    "\n",
    "# Set deviations parameters\n",
    "\n",
    "kn = torch.zeros(nq, dtype=torch.float64)\n",
    "ks = torch.zeros(nq, dtype=torch.float64)\n",
    "\n",
    "# Set initial condition\n",
    "\n",
    "state = torch.tensor([0.0, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "\n",
    "# Compute value\n",
    "\n",
    "print(transformation(1, state, kn, ks))\n",
    "print()\n",
    "\n",
    "# Compute derivative\n",
    "\n",
    "print(torch.func.jacrev(lambda state: transformation(1, state, kn, ks))(state))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3b16b921-d035-43cf-9ad4-148a8f8bfe75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0.],\n",
      "        [0., 0., 0., 0.]], dtype=torch.float64)\n",
      "\n",
      "tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],\n",
      "\n",
      "        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],\n",
      "\n",
      "        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
      "         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]],\n",
      "       dtype=torch.float64)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Compute derivative with respect to parameters\n",
    "\n",
    "corrector.cx = +100.0E-6\n",
    "corrector.cy = -100.0E-6\n",
    "\n",
    "# Generate transformation\n",
    "\n",
    "locations = [0, 1]\n",
    "transformation = trajectory(ring, locations,  ('kn', ['Quadrupole'], None, None), ('ks', ['Quadrupole'], None, None), matched=True, limit=32, epsilon=1.0E-12)\n",
    "\n",
    "# Set deviations parameters\n",
    "\n",
    "kn = torch.zeros(nq, dtype=torch.float64)\n",
    "ks = torch.zeros(nq, dtype=torch.float64)\n",
    "\n",
    "# Set initial condition\n",
    "\n",
    "state = torch.tensor([0.0, 0.0, 0.0, 0.0], dtype=torch.float64)\n",
    "\n",
    "# Compute value\n",
    "\n",
    "print(transformation(1, state, kn, ks))\n",
    "print()\n",
    "\n",
    "# Compute derivative\n",
    "\n",
    "print(torch.func.jacrev(lambda kn: transformation(1, state, kn, ks))(ks))\n",
    "print()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
