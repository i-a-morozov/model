{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "262a5ec8-2553-4237-ab62-319b6ca22089",
   "metadata": {},
   "source": [
    "# Example-48: Advance (Computation of phase advances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "19c9ce37-2486-4548-aeb0-259ec857b96a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this example phase advances between BPMs are computed and compared with ELEGANT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70bf6e2e-b566-495b-a0ab-edefefce88d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import\n",
    "\n",
    "from pprint import pprint\n",
    "\n",
    "import torch\n",
    "from torch import Tensor\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "import matplotlib\n",
    "from matplotlib import pyplot as plt\n",
    "from matplotlib.patches import Rectangle\n",
    "matplotlib.rcParams['text.usetex'] = True\n",
    "\n",
    "from model.library.corrector import Corrector\n",
    "from model.library.line import Line\n",
    "\n",
    "from model.command.util import chop\n",
    "from model.command.util import select\n",
    "\n",
    "from model.command.external import load_sdds\n",
    "from model.command.external import load_lattice\n",
    "\n",
    "from model.command.build import build\n",
    "\n",
    "from model.command.tune import tune\n",
    "from model.command.advance import advance\n",
    "\n",
    "from model.command.layout import Layout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "77bdc7c3-ad18-44fe-b8d7-81c022068e83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load ELEGANT twiss\n",
    "\n",
    "path = Path('ic.twiss')\n",
    "parameters, columns = load_sdds(path)\n",
    "\n",
    "nu_qx:Tensor = torch.tensor(parameters['nux'] % 1, dtype=torch.float64)\n",
    "nu_qy:Tensor = torch.tensor(parameters['nuy'] % 1, dtype=torch.float64)\n",
    "\n",
    "# Set phase advances from lattice start to each BPM\n",
    "\n",
    "kinds = select(columns, 'ElementType', keep=False)\n",
    "\n",
    "mu_qx = select(columns, 'psix', keep=False)\n",
    "mu_qy = select(columns, 'psiy' , keep=False)\n",
    "\n",
    "mu_qx:Tensor = torch.tensor([value for (key, value), kind in zip(mu_qx.items(), kinds.values()) if kind == 'MONI'], dtype=torch.float64)\n",
    "mu_qy:Tensor = torch.tensor([value for (key, value), kind in zip(mu_qy.items(), kinds.values()) if kind == 'MONI'], dtype=torch.float64)\n",
    "\n",
    "positions = select(columns, 's', keep=False).items()\n",
    "positions = [value for (key, value), kind in zip(positions, kinds.values()) if kind == 'MONI']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "743ea4ef-dd8c-4e47-a7ed-5b42e94a3857",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build and setup lattice\n",
    "\n",
    "# Load ELEGANT table\n",
    "\n",
    "path = Path('ic.lte')\n",
    "data = load_lattice(path)\n",
    "\n",
    "# Build ELEGANT table\n",
    "\n",
    "ring:Line = build('RING', 'ELEGANT', data)\n",
    "ring.flatten()\n",
    "\n",
    "# Merge drifts\n",
    "\n",
    "ring.merge()\n",
    "\n",
    "# Split BPMs\n",
    "\n",
    "ring.split((None, ['BPM'], None, None))\n",
    "\n",
    "# Roll lattice start\n",
    "\n",
    "ring.roll(1)\n",
    "\n",
    "# Set linear dipoles\n",
    "\n",
    "for element in ring:\n",
    "    if element.__class__.__name__ == 'Dipole':\n",
    "        element.linear = True\n",
    "\n",
    "# Split lattice into lines by BPMs\n",
    "\n",
    "ring.splice()\n",
    "\n",
    "# Set number of elements of different kinds\n",
    "\n",
    "nb = ring.describe['BPM']\n",
    "nq = ring.describe['Quadrupole']\n",
    "ns = ring.describe['Sextupole']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "333d487b-3cb8-4e43-806e-adb71779d979",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# Compute tunes (fractional part)\n",
    "\n",
    "guess = torch.tensor(4*[0.0], dtype=torch.float64)\n",
    "nuqx, nuqy = tune(ring, [], alignment=False, matched=True, guess=guess, limit=8, epsilon=1.0E-9)\n",
    "\n",
    "# Compare with elegant\n",
    "\n",
    "print(torch.allclose(nu_qx, nuqx))\n",
    "print(torch.allclose(nu_qy, nuqy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "23a2d707-1943-4bfa-bc39-3fcedddff0a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([16])\n",
      "torch.Size([16])\n"
     ]
    }
   ],
   "source": [
    "# Compute phase advances\n",
    "\n",
    "muqx, muqy =  advance(ring, [], alignment=False, matched=True, guess=guess, limit=8, epsilon=1.0E-9)\n",
    "\n",
    "print(muqx.shape)\n",
    "print(muqy.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "04602bd2-7281-4751-bbf0-ec479da4941c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# Check total tunes\n",
    "\n",
    "print(torch.allclose(muqx.sum()/(2*torch.pi), torch.tensor(parameters['nux'], dtype=torch.float64)))\n",
    "print(torch.allclose(muqy.sum()/(2*torch.pi), torch.tensor(parameters['nuy'], dtype=torch.float64)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d4156d5-a926-4504-aee6-70b20443b6fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot accumulated phase advances\n",
    "\n",
    "muqx_sum = torch.cat([torch.tensor([0.0], dtype=torch.float64), muqx.cumsum(-1)])\n",
    "muqy_sum = torch.cat([torch.tensor([0.0], dtype=torch.float64), muqy.cumsum(-1)])\n",
    "\n",
    "# Compare\n",
    "\n",
    "print(torch.allclose(muqx_sum[:-1], mu_qx))\n",
    "print(torch.allclose(muqy_sum[:-1], mu_qy))\n",
    "\n",
    "# Plot\n",
    "\n",
    "layout = Layout(ring)\n",
    "_, _, lengths, *_ = layout.slicing_table()\n",
    "rectangles = layout.profile_1d(scale=5.0, shift=35.0, text=False,  exclude=['BPM', 'Corrector'])\n",
    "\n",
    "plt.figure(figsize=(16, 4))\n",
    "plt.errorbar(positions, mu_qx.cpu().numpy(), fmt=' ', color='red', alpha=0.75, marker='x')\n",
    "plt.errorbar(torch.cat([ring.locations(), ring.length.unsqueeze(-1)]).cpu().numpy(), muqx_sum.cpu().numpy(), fmt='-', color='red', alpha=0.75)\n",
    "plt.errorbar(positions, mu_qy.cpu().numpy(), fmt=' ', color='blue', alpha=0.75, marker='x')\n",
    "plt.errorbar(torch.cat([ring.locations(), ring.length.unsqueeze(-1)]).cpu().numpy(), muqy_sum.cpu().numpy(), fmt='-', color='blue', alpha=0.75)\n",
    "for rectangle in rectangles:\n",
    "    plt.gca().add_patch(Rectangle(**rectangle))\n",
    "plt.ylim(-1.0, 40.0)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
